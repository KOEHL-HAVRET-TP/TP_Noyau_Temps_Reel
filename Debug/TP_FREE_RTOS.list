
TP_FREE_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007338  08007338  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007340  08007340  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007340  08007340  00017340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007344  08007344  00017344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040c8  2000007c  080073c4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004144  080073c4  00024144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e68  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cd  00000000  00000000  00036f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296dd  00000000  00000000  0003c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001779f  00000000  00000000  0006603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0ff  00000000  00000000  0007d7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001798db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005800  00000000  00000000  0017992c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800718c 	.word	0x0800718c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	0800718c 	.word	0x0800718c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	2000009c 	.word	0x2000009c
 80005e4:	200000f0 	.word	0x200000f0

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <MX_FREERTOS_Init+0x30>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fdd5 	bl	80041b4 <osThreadCreate>
 800060a:	4603      	mov	r3, r0
 800060c:	4a03      	ldr	r2, [pc, #12]	; (800061c <MX_FREERTOS_Init+0x34>)
 800060e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000610:	bf00      	nop
 8000612:	3720      	adds	r7, #32
 8000614:	46bd      	mov	sp, r7
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	080071b0 	.word	0x080071b0
 800061c:	20000098 	.word	0x20000098

08000620 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f003 fe0f 	bl	800424c <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartDefaultTask+0x8>

08000630 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000646:	4bad      	ldr	r3, [pc, #692]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4aac      	ldr	r2, [pc, #688]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800064c:	f043 0310 	orr.w	r3, r3, #16
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0310 	and.w	r3, r3, #16
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
 800065c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800065e:	4ba7      	ldr	r3, [pc, #668]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4aa6      	ldr	r2, [pc, #664]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4ba4      	ldr	r3, [pc, #656]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4aa0      	ldr	r2, [pc, #640]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b9e      	ldr	r3, [pc, #632]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068e:	4b9b      	ldr	r3, [pc, #620]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a9a      	ldr	r2, [pc, #616]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000694:	f043 0308 	orr.w	r3, r3, #8
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b98      	ldr	r3, [pc, #608]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0308 	and.w	r3, r3, #8
 80006a2:	61fb      	str	r3, [r7, #28]
 80006a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b95      	ldr	r3, [pc, #596]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a94      	ldr	r2, [pc, #592]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b92      	ldr	r3, [pc, #584]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	61bb      	str	r3, [r7, #24]
 80006bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b8f      	ldr	r3, [pc, #572]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a8e      	ldr	r2, [pc, #568]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b8c      	ldr	r3, [pc, #560]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80006d6:	4b89      	ldr	r3, [pc, #548]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a88      	ldr	r2, [pc, #544]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006ee:	4b83      	ldr	r3, [pc, #524]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a82      	ldr	r2, [pc, #520]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b80      	ldr	r3, [pc, #512]	; (80008fc <MX_GPIO_Init+0x2cc>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000706:	4b7d      	ldr	r3, [pc, #500]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a7c      	ldr	r2, [pc, #496]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800070c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b7a      	ldr	r3, [pc, #488]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b77      	ldr	r3, [pc, #476]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a76      	ldr	r2, [pc, #472]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b74      	ldr	r3, [pc, #464]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	4b71      	ldr	r3, [pc, #452]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a70      	ldr	r2, [pc, #448]	; (80008fc <MX_GPIO_Init+0x2cc>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <MX_GPIO_Init+0x2cc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2120      	movs	r1, #32
 8000752:	486b      	ldr	r0, [pc, #428]	; (8000900 <MX_GPIO_Init+0x2d0>)
 8000754:	f001 fae4 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 010e 	movw	r1, #4110	; 0x100e
 800075e:	4869      	ldr	r0, [pc, #420]	; (8000904 <MX_GPIO_Init+0x2d4>)
 8000760:	f001 fade 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2108      	movs	r1, #8
 8000768:	4867      	ldr	r0, [pc, #412]	; (8000908 <MX_GPIO_Init+0x2d8>)
 800076a:	f001 fad9 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4865      	ldr	r0, [pc, #404]	; (800090c <MX_GPIO_Init+0x2dc>)
 8000776:	f001 fad3 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	21c8      	movs	r1, #200	; 0xc8
 800077e:	4864      	ldr	r0, [pc, #400]	; (8000910 <MX_GPIO_Init+0x2e0>)
 8000780:	f001 face 	bl	8001d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000794:	230e      	movs	r3, #14
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079c:	4619      	mov	r1, r3
 800079e:	485d      	ldr	r0, [pc, #372]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007a0:	f001 f912 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80007a4:	2308      	movs	r3, #8
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4857      	ldr	r0, [pc, #348]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007b8:	f001 f906 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80007bc:	2304      	movs	r3, #4
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007cc:	2309      	movs	r3, #9
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	484f      	ldr	r0, [pc, #316]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80007d8:	f001 f8f6 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007dc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007ee:	230b      	movs	r3, #11
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f6:	4619      	mov	r1, r3
 80007f8:	4845      	ldr	r0, [pc, #276]	; (8000910 <MX_GPIO_Init+0x2e0>)
 80007fa:	f001 f8e5 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80007fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000810:	230c      	movs	r3, #12
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000818:	4619      	mov	r1, r3
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x2e4>)
 800081c:	f001 f8d4 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000820:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000826:	2312      	movs	r3, #18
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000832:	2304      	movs	r3, #4
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <MX_GPIO_Init+0x2e8>)
 800083e:	f001 f8c3 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000842:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000854:	230a      	movs	r3, #10
 8000856:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085c:	4619      	mov	r1, r3
 800085e:	482e      	ldr	r0, [pc, #184]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000860:	f001 f8b2 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8000864:	2310      	movs	r3, #16
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000874:	2302      	movs	r3, #2
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <MX_GPIO_Init+0x2e8>)
 8000880:	f001 f8a2 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000894:	2308      	movs	r3, #8
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4619      	mov	r1, r3
 800089e:	4818      	ldr	r0, [pc, #96]	; (8000900 <MX_GPIO_Init+0x2d0>)
 80008a0:	f001 f892 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80008a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80008a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008b6:	230c      	movs	r3, #12
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	4816      	ldr	r0, [pc, #88]	; (800091c <MX_GPIO_Init+0x2ec>)
 80008c2:	f001 f881 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008d6:	230d      	movs	r3, #13
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008de:	4619      	mov	r1, r3
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <MX_GPIO_Init+0x2e4>)
 80008e2:	f001 f871 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008f6:	230a      	movs	r3, #10
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008fa:	e011      	b.n	8000920 <MX_GPIO_Init+0x2f0>
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40022000 	.word	0x40022000
 8000908:	40022800 	.word	0x40022800
 800090c:	40021c00 	.word	0x40021c00
 8000910:	40021800 	.word	0x40021800
 8000914:	40021000 	.word	0x40021000
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000924:	4619      	mov	r1, r3
 8000926:	48bd      	ldr	r0, [pc, #756]	; (8000c1c <MX_GPIO_Init+0x5ec>)
 8000928:	f001 f84e 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800092c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800093e:	230c      	movs	r3, #12
 8000940:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000946:	4619      	mov	r1, r3
 8000948:	48b5      	ldr	r0, [pc, #724]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 800094a:	f001 f83d 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800094e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000960:	230e      	movs	r3, #14
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000968:	4619      	mov	r1, r3
 800096a:	48ae      	ldr	r0, [pc, #696]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 800096c:	f001 f82c 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000976:	2300      	movs	r3, #0
 8000978:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000982:	4619      	mov	r1, r3
 8000984:	48a7      	ldr	r0, [pc, #668]	; (8000c24 <MX_GPIO_Init+0x5f4>)
 8000986:	f001 f81f 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099c:	4619      	mov	r1, r3
 800099e:	48a2      	ldr	r0, [pc, #648]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 80009a0:	f001 f812 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009b6:	230c      	movs	r3, #12
 80009b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4899      	ldr	r0, [pc, #612]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 80009c2:	f001 f801 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d8:	230a      	movs	r3, #10
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e0:	4619      	mov	r1, r3
 80009e2:	4892      	ldr	r0, [pc, #584]	; (8000c2c <MX_GPIO_Init+0x5fc>)
 80009e4:	f000 fff0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009e8:	23f0      	movs	r3, #240	; 0xf0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009f8:	230a      	movs	r3, #10
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	488b      	ldr	r0, [pc, #556]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000a04:	f000 ffe0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000a08:	23f7      	movs	r3, #247	; 0xf7
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a18:	230e      	movs	r3, #14
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000a1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a20:	4619      	mov	r1, r3
 8000a22:	4884      	ldr	r0, [pc, #528]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000a24:	f000 ffd0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a3a:	2309      	movs	r3, #9
 8000a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	4876      	ldr	r0, [pc, #472]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 8000a46:	f000 ffbf 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a64:	4619      	mov	r1, r3
 8000a66:	486e      	ldr	r0, [pc, #440]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 8000a68:	f000 ffae 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a80:	4619      	mov	r1, r3
 8000a82:	4869      	ldr	r0, [pc, #420]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000a84:	f000 ffa0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a98:	230d      	movs	r3, #13
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4861      	ldr	r0, [pc, #388]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000aa4:	f000 ff90 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LED_Pin|LCD_DISP_Pin;
 8000aa8:	f241 030e 	movw	r3, #4110	; 0x100e
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000abe:	4619      	mov	r1, r3
 8000ac0:	485b      	ldr	r0, [pc, #364]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000ac2:	f000 ff81 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4857      	ldr	r0, [pc, #348]	; (8000c38 <MX_GPIO_Init+0x608>)
 8000adc:	f000 ff74 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ae0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af2:	230c      	movs	r3, #12
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	484f      	ldr	r0, [pc, #316]	; (8000c3c <MX_GPIO_Init+0x60c>)
 8000afe:	f000 ff63 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000b02:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b14:	230e      	movs	r3, #14
 8000b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4844      	ldr	r0, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000b20:	f000 ff52 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000b24:	2308      	movs	r3, #8
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483e      	ldr	r0, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x604>)
 8000b3c:	f000 ff44 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b52:	230d      	movs	r3, #13
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4830      	ldr	r0, [pc, #192]	; (8000c20 <MX_GPIO_Init+0x5f0>)
 8000b5e:	f000 ff33 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b62:	2310      	movs	r3, #16
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b72:	4619      	mov	r1, r3
 8000b74:	482c      	ldr	r0, [pc, #176]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b76:	f000 ff27 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4824      	ldr	r0, [pc, #144]	; (8000c28 <MX_GPIO_Init+0x5f8>)
 8000b96:	f000 ff17 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b9a:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bac:	4619      	mov	r1, r3
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000bb0:	f000 ff0a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481c      	ldr	r0, [pc, #112]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000bce:	f000 fefb 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bd2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000be4:	230d      	movs	r3, #13
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_GPIO_Init+0x610>)
 8000bf0:	f000 feea 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c04:	2302      	movs	r3, #2
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4808      	ldr	r0, [pc, #32]	; (8000c30 <MX_GPIO_Init+0x600>)
 8000c10:	f000 feda 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c18:	e014      	b.n	8000c44 <MX_GPIO_Init+0x614>
 8000c1a:	bf00      	nop
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40021800 	.word	0x40021800
 8000c24:	40022400 	.word	0x40022400
 8000c28:	40020c00 	.word	0x40020c00
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40022800 	.word	0x40022800
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40021400 	.word	0x40021400
 8000c40:	40021c00 	.word	0x40021c00
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4895      	ldr	r0, [pc, #596]	; (8000eb4 <MX_GPIO_Init+0x884>)
 8000c5e:	f000 feb3 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c68:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c76:	4619      	mov	r1, r3
 8000c78:	488f      	ldr	r0, [pc, #572]	; (8000eb8 <MX_GPIO_Init+0x888>)
 8000c7a:	f000 fea5 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c96:	4619      	mov	r1, r3
 8000c98:	4888      	ldr	r0, [pc, #544]	; (8000ebc <MX_GPIO_Init+0x88c>)
 8000c9a:	f000 fe95 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4881      	ldr	r0, [pc, #516]	; (8000ec0 <MX_GPIO_Init+0x890>)
 8000cba:	f000 fe85 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000cbe:	2328      	movs	r3, #40	; 0x28
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4879      	ldr	r0, [pc, #484]	; (8000ec0 <MX_GPIO_Init+0x890>)
 8000cda:	f000 fe75 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000cde:	23c8      	movs	r3, #200	; 0xc8
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4873      	ldr	r0, [pc, #460]	; (8000ec4 <MX_GPIO_Init+0x894>)
 8000cf6:	f000 fe67 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000cfa:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	486e      	ldr	r0, [pc, #440]	; (8000ec8 <MX_GPIO_Init+0x898>)
 8000d10:	f000 fe5a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d14:	2308      	movs	r3, #8
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d24:	230c      	movs	r3, #12
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4863      	ldr	r0, [pc, #396]	; (8000ebc <MX_GPIO_Init+0x88c>)
 8000d30:	f000 fe4a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d34:	2305      	movs	r3, #5
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d44:	230a      	movs	r3, #10
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	485b      	ldr	r0, [pc, #364]	; (8000ebc <MX_GPIO_Init+0x88c>)
 8000d50:	f000 fe3a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d54:	2332      	movs	r3, #50	; 0x32
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4853      	ldr	r0, [pc, #332]	; (8000ebc <MX_GPIO_Init+0x88c>)
 8000d70:	f000 fe2a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d74:	2304      	movs	r3, #4
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d84:	2309      	movs	r3, #9
 8000d86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	484f      	ldr	r0, [pc, #316]	; (8000ecc <MX_GPIO_Init+0x89c>)
 8000d90:	f000 fe1a 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000da6:	2309      	movs	r3, #9
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dae:	4619      	mov	r1, r3
 8000db0:	4847      	ldr	r0, [pc, #284]	; (8000ed0 <MX_GPIO_Init+0x8a0>)
 8000db2:	f000 fe09 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000db6:	2304      	movs	r3, #4
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <MX_GPIO_Init+0x894>)
 8000dca:	f000 fdfd 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dce:	2386      	movs	r3, #134	; 0x86
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dde:	230b      	movs	r3, #11
 8000de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4619      	mov	r1, r3
 8000de8:	4832      	ldr	r0, [pc, #200]	; (8000eb4 <MX_GPIO_Init+0x884>)
 8000dea:	f000 fded 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000dee:	2301      	movs	r3, #1
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df2:	2303      	movs	r3, #3
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	482c      	ldr	r0, [pc, #176]	; (8000eb4 <MX_GPIO_Init+0x884>)
 8000e02:	f000 fde1 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e06:	2350      	movs	r3, #80	; 0x50
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e16:	230d      	movs	r3, #13
 8000e18:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4824      	ldr	r0, [pc, #144]	; (8000eb4 <MX_GPIO_Init+0x884>)
 8000e22:	f000 fdd1 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e26:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e40:	4619      	mov	r1, r3
 8000e42:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <MX_GPIO_Init+0x890>)
 8000e44:	f000 fdc0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e48:	2328      	movs	r3, #40	; 0x28
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e60:	4619      	mov	r1, r3
 8000e62:	4814      	ldr	r0, [pc, #80]	; (8000eb4 <MX_GPIO_Init+0x884>)
 8000e64:	f000 fdb0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e78:	2309      	movs	r3, #9
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	480f      	ldr	r0, [pc, #60]	; (8000ec0 <MX_GPIO_Init+0x890>)
 8000e84:	f000 fda0 	bl	80019c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e9a:	2305      	movs	r3, #5
 8000e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_GPIO_Init+0x89c>)
 8000ea6:	f000 fd8f 	bl	80019c8 <HAL_GPIO_Init>

}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	; 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40022000 	.word	0x40022000
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40021c00 	.word	0x40021c00
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40021400 	.word	0x40021400
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000edc:	1d39      	adds	r1, r7, #4
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <__io_putchar+0x20>)
 8000ee6:	f002 fcbf 	bl	8003868 <HAL_UART_Transmit>

	return ch;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000035c 	.word	0x2000035c

08000ef8 <task_code_Allumage_LED>:

void task_code_Allumage_LED(void * param)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f00:	2102      	movs	r1, #2
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <task_code_Allumage_LED+0x48>)
 8000f04:	f000 ff25 	bl	8001d52 <HAL_GPIO_TogglePin>
		timer++;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <task_code_Allumage_LED+0x4c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <task_code_Allumage_LED+0x4c>)
 8000f10:	6013      	str	r3, [r2, #0]
		if(PinState==1){
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <task_code_Allumage_LED+0x50>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d106      	bne.n	8000f28 <task_code_Allumage_LED+0x30>
			printf("LED eteinte\r\n");
 8000f1a:	480c      	ldr	r0, [pc, #48]	; (8000f4c <task_code_Allumage_LED+0x54>)
 8000f1c:	f005 f9b8 	bl	8006290 <puts>
			PinState=0;
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <task_code_Allumage_LED+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
 8000f26:	e005      	b.n	8000f34 <task_code_Allumage_LED+0x3c>
		}
		else{
			printf("LED allumee\r\n");
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <task_code_Allumage_LED+0x58>)
 8000f2a:	f005 f9b1 	bl	8006290 <puts>
			PinState=1;
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <task_code_Allumage_LED+0x50>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		}
		vTaskDelay(xDelay);
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <task_code_Allumage_LED+0x5c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f003 ffb3 	bl	8004ea4 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f3e:	e7df      	b.n	8000f00 <task_code_Allumage_LED+0x8>
 8000f40:	40022000 	.word	0x40022000
 8000f44:	20000308 	.word	0x20000308
 8000f48:	200002f0 	.word	0x200002f0
 8000f4c:	080071cc 	.word	0x080071cc
 8000f50:	080071dc 	.word	0x080071dc
 8000f54:	20000000 	.word	0x20000000

08000f58 <taskGiveQueue>:
*/

//methodes avec utilisation de queue

void taskGiveQueue(void * param)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	for(;;){
		xQueueSend(q_task1,(void *)&timer,xMAXDelay);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <taskGiveQueue+0x20>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <taskGiveQueue+0x24>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	4905      	ldr	r1, [pc, #20]	; (8000f80 <taskGiveQueue+0x28>)
 8000f6c:	f003 fb02 	bl	8004574 <xQueueGenericSend>
		printf("valeur du timer dans la queue \r\n");
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <taskGiveQueue+0x2c>)
 8000f72:	f005 f98d 	bl	8006290 <puts>
		xQueueSend(q_task1,(void *)&timer,xMAXDelay);
 8000f76:	e7f3      	b.n	8000f60 <taskGiveQueue+0x8>
 8000f78:	20000304 	.word	0x20000304
 8000f7c:	20000004 	.word	0x20000004
 8000f80:	20000308 	.word	0x20000308
 8000f84:	080071ec 	.word	0x080071ec

08000f88 <taskTakeQueue>:
	}

}

void taskTakeQueue(void * param)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint32_t timer_receive_value;
	for(;;){
		xQueueReceive(q_task1, (void *)&timer_receive_value, xMAXDelay);
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <taskTakeQueue+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <taskTakeQueue+0x2c>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	f107 010c 	add.w	r1, r7, #12
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fbef 	bl	8004780 <xQueueReceive>
		printf("le timer vaut : %d\r\n",timer_receive_value);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <taskTakeQueue+0x30>)
 8000fa8:	f005 f8ec 	bl	8006184 <iprintf>
		xQueueReceive(q_task1, (void *)&timer_receive_value, xMAXDelay);
 8000fac:	e7f0      	b.n	8000f90 <taskTakeQueue+0x8>
 8000fae:	bf00      	nop
 8000fb0:	20000304 	.word	0x20000304
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	0800720c 	.word	0x0800720c

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc2:	f000 fb6e 	bl	80016a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc6:	f000 f87b 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fca:	f7ff fb31 	bl	8000630 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fce:	f000 fa8d 	bl	80014ec <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000fd2:	f000 f9f3 	bl	80013bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n===== RTOS TP entrainement =====\r\n");
 8000fd6:	482d      	ldr	r0, [pc, #180]	; (800108c <main+0xd0>)
 8000fd8:	f005 f95a 	bl	8006290 <puts>

	//création semaphore

	sem1 =xSemaphoreCreateBinary();
 8000fdc:	2203      	movs	r2, #3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f003 fa65 	bl	80044b0 <xQueueGenericCreate>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a29      	ldr	r2, [pc, #164]	; (8001090 <main+0xd4>)
 8000fea:	6013      	str	r3, [r2, #0]
	if(sem1==NULL){
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <main+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <main+0x42>
		printf("Error sem1 \r\n");
 8000ff4:	4827      	ldr	r0, [pc, #156]	; (8001094 <main+0xd8>)
 8000ff6:	f005 f94b 	bl	8006290 <puts>
		Error_Handler();
 8000ffa:	f000 f8cd 	bl	8001198 <Error_Handler>
	}


	BaseType_t ret;
	ret = xTaskCreate(task_code_Allumage_LED, "Task1", STACK_DEPTH, NULL, 1, &tLED);
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <main+0xdc>)
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2301      	movs	r3, #1
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	4923      	ldr	r1, [pc, #140]	; (800109c <main+0xe0>)
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <main+0xe4>)
 8001010:	f003 fe0f 	bl	8004c32 <xTaskCreate>
 8001014:	6078      	str	r0, [r7, #4]
	configASSERT(ret == pdPASS); //teste l'égalité qu'on a mit c'est a dt return ) Task, sinon ça bloque le retour
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00c      	beq.n	8001036 <main+0x7a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001020:	b672      	cpsid	i
 8001022:	f383 8811 	msr	BASEPRI, r3
 8001026:	f3bf 8f6f 	isb	sy
 800102a:	f3bf 8f4f 	dsb	sy
 800102e:	b662      	cpsie	i
 8001030:	603b      	str	r3, [r7, #0]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001032:	bf00      	nop
 8001034:	e7fe      	b.n	8001034 <main+0x78>
	//ret = xTaskCreate(taskGive, "Task2", STACK_DEPTH, NULL, 3, &t1);
	//ret = xTaskCreate(taskTake, "Task3", STACK_DEPTH, NULL, 2, &t3);
	//ret = xTaskCreate(taskTakeNotify, "taskTakeNotify", STACK_DEPTH, NULL, 3, &htaskTakeNotify);
//	ret = xTaskCreate(taskGiveNotify, "taskGiveNotify", STACK_DEPTH, NULL, 2, &htaskGiveNotify);

	q_task1=xQueueCreate(QUEUE_LENGTH,QUEUE_SIZE);
 8001036:	2200      	movs	r2, #0
 8001038:	2104      	movs	r1, #4
 800103a:	200a      	movs	r0, #10
 800103c:	f003 fa38 	bl	80044b0 <xQueueGenericCreate>
 8001040:	4603      	mov	r3, r0
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <main+0xe8>)
 8001044:	6013      	str	r3, [r2, #0]
	ret = xTaskCreate(taskTakeQueue, "taskTakeQueue", STACK_DEPTH, NULL, 2, &h_taskTakeQueue);
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <main+0xec>)
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	2302      	movs	r3, #2
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	4915      	ldr	r1, [pc, #84]	; (80010ac <main+0xf0>)
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <main+0xf4>)
 8001058:	f003 fdeb 	bl	8004c32 <xTaskCreate>
 800105c:	6078      	str	r0, [r7, #4]
	ret = xTaskCreate(taskGiveQueue, "taskGiveQueue", STACK_DEPTH, NULL, 3, &h_taskGiveQueue);
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <main+0xf8>)
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	2303      	movs	r3, #3
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	4912      	ldr	r1, [pc, #72]	; (80010b8 <main+0xfc>)
 800106e:	4813      	ldr	r0, [pc, #76]	; (80010bc <main+0x100>)
 8001070:	f003 fddf 	bl	8004c32 <xTaskCreate>
 8001074:	6078      	str	r0, [r7, #4]

	vTaskStartScheduler();
 8001076:	f003 ff4b 	bl	8004f10 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800107a:	f7ff fab5 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800107e:	f003 f892 	bl	80041a6 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f000 fb69 	bl	800175c <HAL_Delay>
 800108a:	e7fa      	b.n	8001082 <main+0xc6>
 800108c:	08007224 	.word	0x08007224
 8001090:	200002f4 	.word	0x200002f4
 8001094:	08007248 	.word	0x08007248
 8001098:	200002f8 	.word	0x200002f8
 800109c:	08007258 	.word	0x08007258
 80010a0:	08000ef9 	.word	0x08000ef9
 80010a4:	20000304 	.word	0x20000304
 80010a8:	200002fc 	.word	0x200002fc
 80010ac:	08007260 	.word	0x08007260
 80010b0:	08000f89 	.word	0x08000f89
 80010b4:	20000300 	.word	0x20000300
 80010b8:	08007270 	.word	0x08007270
 80010bc:	08000f59 	.word	0x08000f59

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f005 f850 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	4b2a      	ldr	r3, [pc, #168]	; (8001190 <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a29      	ldr	r2, [pc, #164]	; (8001190 <SystemClock_Config+0xd0>)
 80010ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b27      	ldr	r3, [pc, #156]	; (8001190 <SystemClock_Config+0xd0>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <SystemClock_Config+0xd4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a24      	ldr	r2, [pc, #144]	; (8001194 <SystemClock_Config+0xd4>)
 8001102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <SystemClock_Config+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111c:	2310      	movs	r3, #16
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001124:	2300      	movs	r3, #0
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800112c:	23d8      	movs	r3, #216	; 0xd8
 800112e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fe73 	bl	8001e28 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001148:	f000 f826 	bl	8001198 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800114c:	f000 fe1c 	bl	8001d88 <HAL_PWREx_EnableOverDrive>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001156:	f000 f81f 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	230f      	movs	r3, #15
 800115c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001166:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2107      	movs	r1, #7
 8001178:	4618      	mov	r0, r3
 800117a:	f001 f8f9 	bl	8002370 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001184:	f000 f808 	bl	8001198 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	; 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011a0:	e7fe      	b.n	80011a0 <Error_Handler+0x8>
	...

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_MspInit+0x4c>)
 80011c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	210f      	movs	r1, #15
 80011de:	f06f 0001 	mvn.w	r0, #1
 80011e2:	f000 fbba 	bl	800195a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 fa7a 	bl	800171c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001228:	f004 fa84 	bl	8005734 <xTaskGetSchedulerState>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d001      	beq.n	8001236 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001232:	f004 fd31 	bl	8005c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <TIM2_IRQHandler+0x10>)
 8001242:	f001 fec2 	bl	8002fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000310 	.word	0x20000310

08001250 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e00a      	b.n	8001278 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	4601      	mov	r1, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf0      	blt.n	8001262 <_read+0x12>
	}

return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe15 	bl	8000ed4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf1      	blt.n	800129c <_write+0x12>
	}
	return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_close>:

int _close(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
	return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f004 fed2 	bl	8006104 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20050000 	.word	0x20050000
 800138c:	00000400 	.word	0x00000400
 8001390:	2000030c 	.word	0x2000030c
 8001394:	20004148 	.word	0x20004148

08001398 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_TIM2_Init+0x98>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <MX_TIM2_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_TIM2_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_TIM2_Init+0x98>)
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_TIM2_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <MX_TIM2_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM2_Init+0x98>)
 8001404:	f001 fd8a 	bl	8002f1c <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800140e:	f7ff fec3 	bl	8001198 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001416:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <MX_TIM2_Init+0x98>)
 8001420:	f001 fef2 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800142a:	f7ff feb5 	bl	8001198 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_TIM2_Init+0x98>)
 800143c:	f002 f91a 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001446:	f7ff fea7 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000310 	.word	0x20000310

08001458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001478:	d130      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_TIM_Base_MspInit+0x8c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80014aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014bc:	2301      	movs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4808      	ldr	r0, [pc, #32]	; (80014e8 <HAL_TIM_Base_MspInit+0x90>)
 80014c8:	f000 fa7e 	bl	80019c8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2105      	movs	r1, #5
 80014d0:	201c      	movs	r0, #28
 80014d2:	f000 fa42 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d6:	201c      	movs	r0, #28
 80014d8:	f000 fa5b 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART1_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001530:	f002 f94c 	bl	80037cc <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f7ff fe2d 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000035c 	.word	0x2000035c
 8001548:	40011000 	.word	0x40011000

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ac      	sub	sp, #176	; 0xb0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	2284      	movs	r2, #132	; 0x84
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fe01 	bl	8006174 <memset>
  if(uartHandle->Instance==USART1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <HAL_UART_MspInit+0xf4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d15c      	bne.n	8001636 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001580:	2300      	movs	r3, #0
 8001582:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f8d7 	bl	800273c <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001594:	f7ff fe00 	bl	8001198 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_UART_MspInit+0xf8>)
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	4a29      	ldr	r2, [pc, #164]	; (8001644 <HAL_UART_MspInit+0xf8>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6453      	str	r3, [r2, #68]	; 0x44
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 0310 	and.w	r3, r3, #16
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a23      	ldr	r2, [pc, #140]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_UART_MspInit+0xf8>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f8:	2307      	movs	r3, #7
 80015fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <HAL_UART_MspInit+0xfc>)
 8001606:	f000 f9df 	bl	80019c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001624:	2307      	movs	r3, #7
 8001626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800162a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800162e:	4619      	mov	r1, r3
 8001630:	4806      	ldr	r0, [pc, #24]	; (800164c <HAL_UART_MspInit+0x100>)
 8001632:	f000 f9c9 	bl	80019c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	37b0      	adds	r7, #176	; 0xb0
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40011000 	.word	0x40011000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400
 800164c:	40020000 	.word	0x40020000

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001656:	490e      	ldr	r1, [pc, #56]	; (8001690 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001658:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800165c:	e002      	b.n	8001664 <LoopCopyDataInit>

0800165e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001662:	3304      	adds	r3, #4

08001664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001668:	d3f9      	bcc.n	800165e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166a:	4a0b      	ldr	r2, [pc, #44]	; (8001698 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800166c:	4c0b      	ldr	r4, [pc, #44]	; (800169c <LoopFillZerobss+0x26>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001670:	e001      	b.n	8001676 <LoopFillZerobss>

08001672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001674:	3204      	adds	r2, #4

08001676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001678:	d3fb      	bcc.n	8001672 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167a:	f7ff fe8d 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800167e:	f004 fd47 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7ff fc9b 	bl	8000fbc <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001694:	08007348 	.word	0x08007348
  ldr r2, =_sbss
 8001698:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800169c:	20004144 	.word	0x20004144

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>

080016a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a6:	2003      	movs	r0, #3
 80016a8:	f000 f94c 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ac:	200f      	movs	r0, #15
 80016ae:	f000 f805 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b2:	f7ff fd77 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f967 	bl	80019ae <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f92f 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000008 	.word	0x20000008
 8001714:	20000010 	.word	0x20000010
 8001718:	2000000c 	.word	0x2000000c

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000010 	.word	0x20000010
 8001740:	200003e4 	.word	0x200003e4

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200003e4 	.word	0x200003e4

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000010 	.word	0x20000010

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	05fa0000 	.word	0x05fa0000

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e175      	b.n	8001cd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8164 	bne.w	8001cce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x56>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80be 	beq.w	8001cce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a65      	ldr	r2, [pc, #404]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_GPIO_Init+0x324>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b6a:	4a61      	ldr	r2, [pc, #388]	; (8001cf0 <HAL_GPIO_Init+0x328>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a58      	ldr	r2, [pc, #352]	; (8001cf4 <HAL_GPIO_Init+0x32c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d037      	beq.n	8001c06 <HAL_GPIO_Init+0x23e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <HAL_GPIO_Init+0x330>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d031      	beq.n	8001c02 <HAL_GPIO_Init+0x23a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a56      	ldr	r2, [pc, #344]	; (8001cfc <HAL_GPIO_Init+0x334>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d02b      	beq.n	8001bfe <HAL_GPIO_Init+0x236>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a55      	ldr	r2, [pc, #340]	; (8001d00 <HAL_GPIO_Init+0x338>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d025      	beq.n	8001bfa <HAL_GPIO_Init+0x232>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a54      	ldr	r2, [pc, #336]	; (8001d04 <HAL_GPIO_Init+0x33c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d01f      	beq.n	8001bf6 <HAL_GPIO_Init+0x22e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a53      	ldr	r2, [pc, #332]	; (8001d08 <HAL_GPIO_Init+0x340>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d019      	beq.n	8001bf2 <HAL_GPIO_Init+0x22a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_GPIO_Init+0x344>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d013      	beq.n	8001bee <HAL_GPIO_Init+0x226>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_GPIO_Init+0x348>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00d      	beq.n	8001bea <HAL_GPIO_Init+0x222>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_GPIO_Init+0x34c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d007      	beq.n	8001be6 <HAL_GPIO_Init+0x21e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	; (8001d18 <HAL_GPIO_Init+0x350>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_GPIO_Init+0x21a>
 8001bde:	2309      	movs	r3, #9
 8001be0:	e012      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001be2:	230a      	movs	r3, #10
 8001be4:	e010      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001be6:	2308      	movs	r3, #8
 8001be8:	e00e      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e00c      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00a      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	e008      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e004      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e002      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x240>
 8001c06:	2300      	movs	r3, #0
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	f002 0203 	and.w	r2, r2, #3
 8001c0e:	0092      	lsls	r2, r2, #2
 8001c10:	4093      	lsls	r3, r2
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c18:	4935      	ldr	r1, [pc, #212]	; (8001cf0 <HAL_GPIO_Init+0x328>)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	089b      	lsrs	r3, r3, #2
 8001c1e:	3302      	adds	r3, #2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a29      	ldr	r2, [pc, #164]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b0f      	cmp	r3, #15
 8001cd8:	f67f ae86 	bls.w	80019e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40013800 	.word	0x40013800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	40021800 	.word	0x40021800
 8001d10:	40021c00 	.word	0x40021c00
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40022400 	.word	0x40022400
 8001d1c:	40013c00 	.word	0x40013c00

08001d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d30:	787b      	ldrb	r3, [r7, #1]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d3c:	e003      	b.n	8001d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d3e:	887b      	ldrh	r3, [r7, #2]
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b085      	sub	sp, #20
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d64:	887a      	ldrh	r2, [r7, #2]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	041a      	lsls	r2, r3, #16
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	43d9      	mvns	r1, r3
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	400b      	ands	r3, r1
 8001d74:	431a      	orrs	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	619a      	str	r2, [r3, #24]
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_PWREx_EnableOverDrive+0x98>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001db6:	f7ff fcc5 	bl	8001744 <HAL_GetTick>
 8001dba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dbc:	e009      	b.n	8001dd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dbe:	f7ff fcc1 	bl	8001744 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dcc:	d901      	bls.n	8001dd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e022      	b.n	8001e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dde:	d1ee      	bne.n	8001dbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dec:	f7ff fcaa 	bl	8001744 <HAL_GetTick>
 8001df0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001df2:	e009      	b.n	8001e08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df4:	f7ff fca6 	bl	8001744 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e02:	d901      	bls.n	8001e08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e007      	b.n	8001e18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e14:	d1ee      	bne.n	8001df4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e291      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b96      	ldr	r3, [pc, #600]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e58:	4b93      	ldr	r3, [pc, #588]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62>
 8001e64:	4b90      	ldr	r3, [pc, #576]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4b8d      	ldr	r3, [pc, #564]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x130>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d168      	bne.n	8001f58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e26b      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x7a>
 8001e94:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a83      	ldr	r2, [pc, #524]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x9c>
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a7b      	ldr	r2, [pc, #492]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xc0>
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b73      	ldr	r3, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a72      	ldr	r2, [pc, #456]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd8>
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a6b      	ldr	r2, [pc, #428]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fc1c 	bl	8001744 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fc18 	bl	8001744 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e21f      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b61      	ldr	r3, [pc, #388]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe8>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f30:	f7ff fc08 	bl	8001744 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fc04 	bl	8001744 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e20b      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x110>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d069      	beq.n	800203a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x190>
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1df      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	493d      	ldr	r1, [pc, #244]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e040      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d023      	beq.n	8002008 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fbba 	bl	8001744 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fbb6 	bl	8001744 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1bd      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4929      	ldr	r1, [pc, #164]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
 8002006:	e018      	b.n	800203a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff fb96 	bl	8001744 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff fb92 	bl	8001744 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e199      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d038      	beq.n	80020b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d019      	beq.n	8002082 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205a:	f7ff fb73 	bl	8001744 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002062:	f7ff fb6f 	bl	8001744 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e176      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x23a>
 8002080:	e01a      	b.n	80020b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x280>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208e:	f7ff fb59 	bl	8001744 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002096:	f7ff fb55 	bl	8001744 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d903      	bls.n	80020ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e15c      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
 80020a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80020ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ee      	bne.n	8002096 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a4 	beq.w	800220e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10d      	bne.n	80020ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4b88      	ldr	r3, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80020d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6413      	str	r3, [r2, #64]	; 0x40
 80020de:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ee:	4b82      	ldr	r3, [pc, #520]	; (80022f8 <HAL_RCC_OscConfig+0x4d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d118      	bne.n	800212c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020fa:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002106:	f7ff fb1d 	bl	8001744 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210e:	f7ff fb19 	bl	8001744 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b64      	cmp	r3, #100	; 0x64
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e120      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x4d0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x31a>
 8002134:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a6e      	ldr	r2, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	e02d      	b.n	800219e <HAL_RCC_OscConfig+0x376>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0x33c>
 800214a:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800214c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214e:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6713      	str	r3, [r2, #112]	; 0x70
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	6713      	str	r3, [r2, #112]	; 0x70
 8002162:	e01c      	b.n	800219e <HAL_RCC_OscConfig+0x376>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b05      	cmp	r3, #5
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_OscConfig+0x35e>
 800216c:	4b61      	ldr	r3, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a60      	ldr	r2, [pc, #384]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	f043 0304 	orr.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	4b5e      	ldr	r3, [pc, #376]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e00b      	b.n	800219e <HAL_RCC_OscConfig+0x376>
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a5a      	ldr	r2, [pc, #360]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800218c:	f023 0301 	bic.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a57      	ldr	r2, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	f023 0304 	bic.w	r3, r3, #4
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d015      	beq.n	80021d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff facd 	bl	8001744 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff fac9 	bl	8001744 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021bc:	4293      	cmp	r3, r2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0ce      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c4:	4b4b      	ldr	r3, [pc, #300]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0ee      	beq.n	80021ae <HAL_RCC_OscConfig+0x386>
 80021d0:	e014      	b.n	80021fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d2:	f7ff fab7 	bl	8001744 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff fab3 	bl	8001744 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	4b40      	ldr	r3, [pc, #256]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d105      	bne.n	800220e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002202:	4b3c      	ldr	r3, [pc, #240]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a3b      	ldr	r2, [pc, #236]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80a4 	beq.w	8002360 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d06b      	beq.n	80022fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d149      	bne.n	80022c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a30      	ldr	r2, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fa84 	bl	8001744 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff fa80 	bl	8001744 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e087      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69da      	ldr	r2, [r3, #28]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	4313      	orrs	r3, r2
 8002284:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800228a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fa54 	bl	8001744 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff fa50 	bl	8001744 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e057      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x478>
 80022be:	e04f      	b.n	8002360 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fa3a 	bl	8001744 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fa36 	bl	8001744 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e03d      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4ac>
 80022f2:	e035      	b.n	8002360 <HAL_RCC_OscConfig+0x538>
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x544>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d028      	beq.n	800235c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002314:	429a      	cmp	r2, r3
 8002316:	d121      	bne.n	800235c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002332:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002334:	4293      	cmp	r3, r2
 8002336:	d111      	bne.n	800235c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d107      	bne.n	800235c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0d0      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002388:	4b6a      	ldr	r3, [pc, #424]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 030f 	and.w	r3, r3, #15
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d910      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002396:	4b67      	ldr	r3, [pc, #412]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 020f 	bic.w	r2, r3, #15
 800239e:	4965      	ldr	r1, [pc, #404]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a58      	ldr	r2, [pc, #352]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d040      	beq.n	8002494 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d115      	bne.n	8002452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	4b41      	ldr	r3, [pc, #260]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e073      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f023 0203 	bic.w	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4936      	ldr	r1, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7ff f96e 	bl	8001744 <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	e00a      	b.n	8002482 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246c:	f7ff f96a 	bl	8001744 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	f241 3288 	movw	r2, #5000	; 0x1388
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e053      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 020c 	and.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	429a      	cmp	r2, r3
 8002492:	d1eb      	bne.n	800246c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d210      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b24      	ldr	r3, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	4922      	ldr	r1, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f821 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <HAL_RCC_ClockConfig+0x1cc>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_RCC_ClockConfig+0x1d0>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_ClockConfig+0x1d4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f8ca 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00
 8002538:	40023800 	.word	0x40023800
 800253c:	08007288 	.word	0x08007288
 8002540:	20000008 	.word	0x20000008
 8002544:	2000000c 	.word	0x2000000c

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b090      	sub	sp, #64	; 0x40
 800254e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	2300      	movs	r3, #0
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d00d      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x40>
 800256c:	2b08      	cmp	r3, #8
 800256e:	f200 80a1 	bhi.w	80026b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
 8002576:	2b04      	cmp	r3, #4
 8002578:	d003      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x3a>
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800257c:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCC_GetSysClockFreq+0x184>)
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002580:	e09b      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002582:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002586:	e098      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002588:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002592:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d028      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b4a      	ldr	r3, [pc, #296]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	2200      	movs	r2, #0
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	627a      	str	r2, [r7, #36]	; 0x24
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80025b0:	2100      	movs	r1, #0
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025b4:	fb03 f201 	mul.w	r2, r3, r1
 80025b8:	2300      	movs	r3, #0
 80025ba:	fb00 f303 	mul.w	r3, r0, r3
 80025be:	4413      	add	r3, r2
 80025c0:	4a43      	ldr	r2, [pc, #268]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80025c2:	fba0 1202 	umull	r1, r2, r0, r2
 80025c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c8:	460a      	mov	r2, r1
 80025ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80025cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ce:	4413      	add	r3, r2
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d4:	2200      	movs	r2, #0
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	61fa      	str	r2, [r7, #28]
 80025da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025e2:	f7fd fe65 	bl	80002b0 <__aeabi_uldivmod>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4613      	mov	r3, r2
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025ee:	e053      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	2200      	movs	r2, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	617a      	str	r2, [r7, #20]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002602:	f04f 0b00 	mov.w	fp, #0
 8002606:	4652      	mov	r2, sl
 8002608:	465b      	mov	r3, fp
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	0159      	lsls	r1, r3, #5
 8002614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002618:	0150      	lsls	r0, r2, #5
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	ebb2 080a 	subs.w	r8, r2, sl
 8002622:	eb63 090b 	sbc.w	r9, r3, fp
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800263a:	ebb2 0408 	subs.w	r4, r2, r8
 800263e:	eb63 0509 	sbc.w	r5, r3, r9
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	00eb      	lsls	r3, r5, #3
 800264c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002650:	00e2      	lsls	r2, r4, #3
 8002652:	4614      	mov	r4, r2
 8002654:	461d      	mov	r5, r3
 8002656:	eb14 030a 	adds.w	r3, r4, sl
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	eb45 030b 	adc.w	r3, r5, fp
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800266e:	4629      	mov	r1, r5
 8002670:	028b      	lsls	r3, r1, #10
 8002672:	4621      	mov	r1, r4
 8002674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002678:	4621      	mov	r1, r4
 800267a:	028a      	lsls	r2, r1, #10
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	2200      	movs	r2, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	60fa      	str	r2, [r7, #12]
 8002688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800268c:	f7fd fe10 	bl	80002b0 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	3301      	adds	r3, #1
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80026a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026b2:	e002      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetSysClockFreq+0x184>)
 80026b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80026b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3740      	adds	r7, #64	; 0x40
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	00f42400 	.word	0x00f42400
 80026d0:	017d7840 	.word	0x017d7840

080026d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	20000008 	.word	0x20000008

080026ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026f0:	f7ff fff0 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0a9b      	lsrs	r3, r3, #10
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4903      	ldr	r1, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40023800 	.word	0x40023800
 8002710:	08007298 	.word	0x08007298

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002718:	f7ff ffdc 	bl	80026d4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	08007298 	.word	0x08007298

0800273c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002748:	2300      	movs	r3, #0
 800274a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002764:	4b69      	ldr	r3, [pc, #420]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800276e:	6093      	str	r3, [r2, #8]
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002778:	4964      	ldr	r1, [pc, #400]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800279c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	4959      	ldr	r1, [pc, #356]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027b4:	d101      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d017      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027d2:	4b4e      	ldr	r3, [pc, #312]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	494a      	ldr	r1, [pc, #296]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f0:	d101      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 808b 	beq.w	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002820:	4b3a      	ldr	r3, [pc, #232]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4a39      	ldr	r2, [pc, #228]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	; 0x40
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002844:	f7fe ff7e 	bl	8001744 <HAL_GetTick>
 8002848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284c:	f7fe ff7a 	bl	8001744 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e357      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800286a:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d035      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d02e      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002888:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d114      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff42 	bl	8001744 <HAL_GetTick>
 80028c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff3e 	bl	8001744 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e319      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f2:	d111      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002902:	400b      	ands	r3, r1
 8002904:	4901      	ldr	r1, [pc, #4]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002906:	4313      	orrs	r3, r2
 8002908:	608b      	str	r3, [r1, #8]
 800290a:	e00b      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800290c:	40023800 	.word	0x40023800
 8002910:	40007000 	.word	0x40007000
 8002914:	0ffffcff 	.word	0x0ffffcff
 8002918:	4baa      	ldr	r3, [pc, #680]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4aa9      	ldr	r2, [pc, #676]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002922:	6093      	str	r3, [r2, #8]
 8002924:	4ba7      	ldr	r3, [pc, #668]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002926:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002930:	49a4      	ldr	r1, [pc, #656]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002932:	4313      	orrs	r3, r2
 8002934:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d010      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002942:	4ba0      	ldr	r3, [pc, #640]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002948:	4a9e      	ldr	r2, [pc, #632]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002952:	4b9c      	ldr	r3, [pc, #624]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002954:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	4999      	ldr	r1, [pc, #612]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002970:	4b94      	ldr	r3, [pc, #592]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297e:	4991      	ldr	r1, [pc, #580]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002992:	4b8c      	ldr	r3, [pc, #560]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029a0:	4988      	ldr	r1, [pc, #544]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b4:	4b83      	ldr	r3, [pc, #524]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	4980      	ldr	r1, [pc, #512]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029d6:	4b7b      	ldr	r3, [pc, #492]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4977      	ldr	r1, [pc, #476]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029f8:	4b72      	ldr	r3, [pc, #456]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f023 0203 	bic.w	r2, r3, #3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	496f      	ldr	r1, [pc, #444]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a1a:	4b6a      	ldr	r3, [pc, #424]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f023 020c 	bic.w	r2, r3, #12
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	4966      	ldr	r1, [pc, #408]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	495e      	ldr	r1, [pc, #376]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a6c:	4955      	ldr	r1, [pc, #340]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	494d      	ldr	r1, [pc, #308]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002aa2:	4b48      	ldr	r3, [pc, #288]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4944      	ldr	r1, [pc, #272]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	493c      	ldr	r1, [pc, #240]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af4:	4933      	ldr	r1, [pc, #204]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b08:	4b2e      	ldr	r3, [pc, #184]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b16:	492b      	ldr	r1, [pc, #172]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d011      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b38:	4922      	ldr	r1, [pc, #136]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b48:	d101      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b6a:	4b16      	ldr	r3, [pc, #88]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	4912      	ldr	r1, [pc, #72]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b9c:	4909      	ldr	r1, [pc, #36]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d006      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80d9 	beq.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bb8:	4b02      	ldr	r3, [pc, #8]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a01      	ldr	r2, [pc, #4]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bc2:	e001      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bca:	f7fe fdbb 	bl	8001744 <HAL_GetTick>
 8002bce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bd2:	f7fe fdb7 	bl	8001744 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e194      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be4:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d021      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11d      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c04:	4b64      	ldr	r3, [pc, #400]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c12:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c18:	0e1b      	lsrs	r3, r3, #24
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	019a      	lsls	r2, r3, #6
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	071b      	lsls	r3, r3, #28
 8002c38:	4957      	ldr	r1, [pc, #348]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d004      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02e      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6a:	d129      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c80:	0f1b      	lsrs	r3, r3, #28
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	019a      	lsls	r2, r3, #6
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	071b      	lsls	r3, r3, #28
 8002ca0:	493d      	ldr	r1, [pc, #244]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cae:	f023 021f 	bic.w	r2, r3, #31
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	4937      	ldr	r1, [pc, #220]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01d      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd2:	0e1b      	lsrs	r3, r3, #24
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cda:	4b2f      	ldr	r3, [pc, #188]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	0f1b      	lsrs	r3, r3, #28
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	019a      	lsls	r2, r3, #6
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	061b      	lsls	r3, r3, #24
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	071b      	lsls	r3, r3, #28
 8002d00:	4925      	ldr	r1, [pc, #148]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d011      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	019a      	lsls	r2, r3, #6
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	041b      	lsls	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	061b      	lsls	r3, r3, #24
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	071b      	lsls	r3, r3, #28
 8002d30:	4919      	ldr	r1, [pc, #100]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d38:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe fcfe 	bl	8001744 <HAL_GetTick>
 8002d48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d4c:	f7fe fcfa 	bl	8001744 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e0d7      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 80cd 	bne.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7e:	f7fe fce1 	bl	8001744 <HAL_GetTick>
 8002d82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d86:	f7fe fcdd 	bl	8001744 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d903      	bls.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0ba      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002d98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d9c:	4b5e      	ldr	r3, [pc, #376]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002da8:	d0ed      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d02e      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d12a      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	f003 0303 	and.w	r3, r3, #3
 8002dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002de0:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	0f1b      	lsrs	r3, r3, #28
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	019a      	lsls	r2, r3, #6
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	041b      	lsls	r3, r3, #16
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	061b      	lsls	r3, r3, #24
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	071b      	lsls	r3, r3, #28
 8002e06:	4944      	ldr	r1, [pc, #272]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e0e:	4b42      	ldr	r3, [pc, #264]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	493d      	ldr	r1, [pc, #244]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d022      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e3c:	d11d      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e44:	0e1b      	lsrs	r3, r3, #24
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e52:	0f1b      	lsrs	r3, r3, #28
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	431a      	orrs	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	061b      	lsls	r3, r3, #24
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	071b      	lsls	r3, r3, #28
 8002e72:	4929      	ldr	r1, [pc, #164]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d028      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	0e1b      	lsrs	r3, r3, #24
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	019a      	lsls	r2, r3, #6
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	041b      	lsls	r3, r3, #16
 8002eac:	431a      	orrs	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	071b      	lsls	r3, r3, #28
 8002eba:	4917      	ldr	r1, [pc, #92]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ec8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	4911      	ldr	r1, [pc, #68]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0e      	ldr	r2, [pc, #56]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee4:	f7fe fc2e 	bl	8001744 <HAL_GetTick>
 8002ee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eec:	f7fe fc2a 	bl	8001744 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b64      	cmp	r3, #100	; 0x64
 8002ef8:	d901      	bls.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e007      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f0a:	d1ef      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800

08002f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e049      	b.n	8002fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d106      	bne.n	8002f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fa88 	bl	8001458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f000 fa50 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d122      	bne.n	8003026 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d11b      	bne.n	8003026 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f06f 0202 	mvn.w	r2, #2
 8002ff6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9d9 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 8003012:	e005      	b.n	8003020 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f9cb 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f9dc 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d122      	bne.n	800307a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d11b      	bne.n	800307a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f06f 0204 	mvn.w	r2, #4
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f9af 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 8003066:	e005      	b.n	8003074 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f9a1 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f9b2 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d122      	bne.n	80030ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11b      	bne.n	80030ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0208 	mvn.w	r2, #8
 800309e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f985 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 80030ba:	e005      	b.n	80030c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f977 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f988 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d122      	bne.n	8003122 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d11b      	bne.n	8003122 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f06f 0210 	mvn.w	r2, #16
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f95b 	bl	80033c4 <HAL_TIM_IC_CaptureCallback>
 800310e:	e005      	b.n	800311c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f94d 	bl	80033b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f95e 	bl	80033d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10e      	bne.n	800314e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b01      	cmp	r3, #1
 800313c:	d107      	bne.n	800314e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0201 	mvn.w	r2, #1
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f927 	bl	800339c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fb15 	bl	80037a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003188:	d10e      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d107      	bne.n	80031a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fb08 	bl	80037b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d107      	bne.n	80031d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f90c 	bl	80033ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d10e      	bne.n	8003200 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d107      	bne.n	8003200 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fac8 	bl	8003790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIM_ConfigClockSource+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e0b4      	b.n	800338e <HAL_TIM_ConfigClockSource+0x186>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_TIM_ConfigClockSource+0x190>)
 8003240:	4013      	ands	r3, r2
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325c:	d03e      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xd4>
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	f200 8087 	bhi.w	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	f000 8086 	beq.w	800337a <HAL_TIM_ConfigClockSource+0x172>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	d87f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d01a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xa6>
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d87b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d050      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x11a>
 8003280:	2b60      	cmp	r3, #96	; 0x60
 8003282:	d877      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d03c      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0xfa>
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d873      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d058      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x13a>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d86f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d064      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d86b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d060      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d867      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d05a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	e062      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f000 f9b9 	bl	8003634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e04f      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f000 f9a2 	bl	8003634 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fe:	609a      	str	r2, [r3, #8]
      break;
 8003300:	e03c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	f000 f916 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2150      	movs	r1, #80	; 0x50
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f96f 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003320:	e02c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	461a      	mov	r2, r3
 8003330:	f000 f935 	bl	800359e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2160      	movs	r1, #96	; 0x60
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f95f 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003340:	e01c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	461a      	mov	r2, r3
 8003350:	f000 f8f6 	bl	8003540 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f94f 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003360:	e00c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f000 f946 	bl	80035fe <TIM_ITRx_SetConfig>
      break;
 8003372:	e003      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e000      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800337a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	fffeff88 	.word	0xfffeff88

0800339c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a40      	ldr	r2, [pc, #256]	; (8003514 <TIM_Base_SetConfig+0x114>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d013      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341e:	d00f      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a3d      	ldr	r2, [pc, #244]	; (8003518 <TIM_Base_SetConfig+0x118>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3c      	ldr	r2, [pc, #240]	; (800351c <TIM_Base_SetConfig+0x11c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <TIM_Base_SetConfig+0x120>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3a      	ldr	r2, [pc, #232]	; (8003524 <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2f      	ldr	r2, [pc, #188]	; (8003514 <TIM_Base_SetConfig+0x114>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003460:	d027      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2c      	ldr	r2, [pc, #176]	; (8003518 <TIM_Base_SetConfig+0x118>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d023      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2b      	ldr	r2, [pc, #172]	; (800351c <TIM_Base_SetConfig+0x11c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d01f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <TIM_Base_SetConfig+0x120>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a29      	ldr	r2, [pc, #164]	; (8003524 <TIM_Base_SetConfig+0x124>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d017      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a28      	ldr	r2, [pc, #160]	; (8003528 <TIM_Base_SetConfig+0x128>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a27      	ldr	r2, [pc, #156]	; (800352c <TIM_Base_SetConfig+0x12c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00f      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a26      	ldr	r2, [pc, #152]	; (8003530 <TIM_Base_SetConfig+0x130>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00b      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a25      	ldr	r2, [pc, #148]	; (8003534 <TIM_Base_SetConfig+0x134>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d007      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <TIM_Base_SetConfig+0x138>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <TIM_Base_SetConfig+0x13c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <TIM_Base_SetConfig+0x114>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0xf8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <TIM_Base_SetConfig+0x124>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d103      	bne.n	8003500 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	615a      	str	r2, [r3, #20]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40010400 	.word	0x40010400
 8003528:	40014000 	.word	0x40014000
 800352c:	40014400 	.word	0x40014400
 8003530:	40014800 	.word	0x40014800
 8003534:	40001800 	.word	0x40001800
 8003538:	40001c00 	.word	0x40001c00
 800353c:	40002000 	.word	0x40002000

08003540 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 030a 	bic.w	r3, r3, #10
 800357c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	621a      	str	r2, [r3, #32]
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359e:	b480      	push	{r7}
 80035a0:	b087      	sub	sp, #28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f023 0210 	bic.w	r2, r3, #16
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	031b      	lsls	r3, r3, #12
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	621a      	str	r2, [r3, #32]
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003614:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 0307 	orr.w	r3, r3, #7
 8003620:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	021a      	lsls	r2, r3, #8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	431a      	orrs	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e06d      	b.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a2f      	ldr	r2, [pc, #188]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d022      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fe:	d01d      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1d      	ldr	r2, [pc, #116]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d018      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d013      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a15      	ldr	r2, [pc, #84]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a15      	ldr	r2, [pc, #84]	; (800378c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40010000 	.word	0x40010000
 8003778:	40010400 	.word	0x40010400
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800

08003790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e040      	b.n	8003860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd feac 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8b0 	bl	8003970 <UART_SetConfig>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e022      	b.n	8003860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fb08 	bl	8003e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003846:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fb8f 	bl	8003f7c <UART_CheckIdleState>
 800385e:	4603      	mov	r3, r0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	4613      	mov	r3, r2
 8003876:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387c:	2b20      	cmp	r3, #32
 800387e:	d171      	bne.n	8003964 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Transmit+0x24>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e06a      	b.n	8003966 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389e:	f7fd ff51 	bl	8001744 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d108      	bne.n	80038d0 <HAL_UART_Transmit+0x68>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d104      	bne.n	80038d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	e003      	b.n	80038d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d8:	e02c      	b.n	8003934 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb80 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e038      	b.n	8003966 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1cc      	bne.n	80038da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2200      	movs	r2, #0
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fb4d 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e005      	b.n	8003966 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4ba6      	ldr	r3, [pc, #664]	; (8003c34 <UART_SetConfig+0x2c4>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	6979      	ldr	r1, [r7, #20]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	430a      	orrs	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a94      	ldr	r2, [pc, #592]	; (8003c38 <UART_SetConfig+0x2c8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d120      	bne.n	8003a2e <UART_SetConfig+0xbe>
 80039ec:	4b93      	ldr	r3, [pc, #588]	; (8003c3c <UART_SetConfig+0x2cc>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d816      	bhi.n	8003a28 <UART_SetConfig+0xb8>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x90>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a1d 	.word	0x08003a1d
 8003a08:	08003a17 	.word	0x08003a17
 8003a0c:	08003a23 	.word	0x08003a23
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e150      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a16:	2302      	movs	r3, #2
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e14d      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e14a      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a22:	2308      	movs	r3, #8
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e147      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e144      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a83      	ldr	r2, [pc, #524]	; (8003c40 <UART_SetConfig+0x2d0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d132      	bne.n	8003a9e <UART_SetConfig+0x12e>
 8003a38:	4b80      	ldr	r3, [pc, #512]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d828      	bhi.n	8003a98 <UART_SetConfig+0x128>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0xdc>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003a99 	.word	0x08003a99
 8003a54:	08003a99 	.word	0x08003a99
 8003a58:	08003a99 	.word	0x08003a99
 8003a5c:	08003a8d 	.word	0x08003a8d
 8003a60:	08003a99 	.word	0x08003a99
 8003a64:	08003a99 	.word	0x08003a99
 8003a68:	08003a99 	.word	0x08003a99
 8003a6c:	08003a87 	.word	0x08003a87
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003a99 	.word	0x08003a99
 8003a7c:	08003a93 	.word	0x08003a93
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e118      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e115      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e112      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e10f      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e10c      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a68      	ldr	r2, [pc, #416]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d120      	bne.n	8003aea <UART_SetConfig+0x17a>
 8003aa8:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ab2:	2b30      	cmp	r3, #48	; 0x30
 8003ab4:	d013      	beq.n	8003ade <UART_SetConfig+0x16e>
 8003ab6:	2b30      	cmp	r3, #48	; 0x30
 8003ab8:	d814      	bhi.n	8003ae4 <UART_SetConfig+0x174>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d009      	beq.n	8003ad2 <UART_SetConfig+0x162>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d810      	bhi.n	8003ae4 <UART_SetConfig+0x174>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <UART_SetConfig+0x15c>
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d006      	beq.n	8003ad8 <UART_SetConfig+0x168>
 8003aca:	e00b      	b.n	8003ae4 <UART_SetConfig+0x174>
 8003acc:	2300      	movs	r3, #0
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e0f2      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	77fb      	strb	r3, [r7, #31]
 8003ad6:	e0ef      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	77fb      	strb	r3, [r7, #31]
 8003adc:	e0ec      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ade:	2308      	movs	r3, #8
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e0e9      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e0e6      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a56      	ldr	r2, [pc, #344]	; (8003c48 <UART_SetConfig+0x2d8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d120      	bne.n	8003b36 <UART_SetConfig+0x1c6>
 8003af4:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003afe:	2bc0      	cmp	r3, #192	; 0xc0
 8003b00:	d013      	beq.n	8003b2a <UART_SetConfig+0x1ba>
 8003b02:	2bc0      	cmp	r3, #192	; 0xc0
 8003b04:	d814      	bhi.n	8003b30 <UART_SetConfig+0x1c0>
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d009      	beq.n	8003b1e <UART_SetConfig+0x1ae>
 8003b0a:	2b80      	cmp	r3, #128	; 0x80
 8003b0c:	d810      	bhi.n	8003b30 <UART_SetConfig+0x1c0>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <UART_SetConfig+0x1a8>
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d006      	beq.n	8003b24 <UART_SetConfig+0x1b4>
 8003b16:	e00b      	b.n	8003b30 <UART_SetConfig+0x1c0>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e0cc      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e0c9      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b24:	2304      	movs	r3, #4
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e0c6      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e0c3      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b30:	2310      	movs	r3, #16
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e0c0      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a44      	ldr	r2, [pc, #272]	; (8003c4c <UART_SetConfig+0x2dc>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d125      	bne.n	8003b8c <UART_SetConfig+0x21c>
 8003b40:	4b3e      	ldr	r3, [pc, #248]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4e:	d017      	beq.n	8003b80 <UART_SetConfig+0x210>
 8003b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b54:	d817      	bhi.n	8003b86 <UART_SetConfig+0x216>
 8003b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5a:	d00b      	beq.n	8003b74 <UART_SetConfig+0x204>
 8003b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b60:	d811      	bhi.n	8003b86 <UART_SetConfig+0x216>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <UART_SetConfig+0x1fe>
 8003b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6a:	d006      	beq.n	8003b7a <UART_SetConfig+0x20a>
 8003b6c:	e00b      	b.n	8003b86 <UART_SetConfig+0x216>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e0a1      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b74:	2302      	movs	r3, #2
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e09e      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e09b      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b80:	2308      	movs	r3, #8
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e098      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b86:	2310      	movs	r3, #16
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e095      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <UART_SetConfig+0x2e0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d125      	bne.n	8003be2 <UART_SetConfig+0x272>
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba4:	d017      	beq.n	8003bd6 <UART_SetConfig+0x266>
 8003ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003baa:	d817      	bhi.n	8003bdc <UART_SetConfig+0x26c>
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb0:	d00b      	beq.n	8003bca <UART_SetConfig+0x25a>
 8003bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb6:	d811      	bhi.n	8003bdc <UART_SetConfig+0x26c>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <UART_SetConfig+0x254>
 8003bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc0:	d006      	beq.n	8003bd0 <UART_SetConfig+0x260>
 8003bc2:	e00b      	b.n	8003bdc <UART_SetConfig+0x26c>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e076      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	77fb      	strb	r3, [r7, #31]
 8003bce:	e073      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e070      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e06d      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e06a      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	; (8003c54 <UART_SetConfig+0x2e4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d138      	bne.n	8003c5e <UART_SetConfig+0x2ee>
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bfa:	d017      	beq.n	8003c2c <UART_SetConfig+0x2bc>
 8003bfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c00:	d82a      	bhi.n	8003c58 <UART_SetConfig+0x2e8>
 8003c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c06:	d00b      	beq.n	8003c20 <UART_SetConfig+0x2b0>
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d824      	bhi.n	8003c58 <UART_SetConfig+0x2e8>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <UART_SetConfig+0x2aa>
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c16:	d006      	beq.n	8003c26 <UART_SetConfig+0x2b6>
 8003c18:	e01e      	b.n	8003c58 <UART_SetConfig+0x2e8>
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	77fb      	strb	r3, [r7, #31]
 8003c1e:	e04b      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c20:	2302      	movs	r3, #2
 8003c22:	77fb      	strb	r3, [r7, #31]
 8003c24:	e048      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c26:	2304      	movs	r3, #4
 8003c28:	77fb      	strb	r3, [r7, #31]
 8003c2a:	e045      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c2c:	2308      	movs	r3, #8
 8003c2e:	77fb      	strb	r3, [r7, #31]
 8003c30:	e042      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c32:	bf00      	nop
 8003c34:	efff69f3 	.word	0xefff69f3
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40004400 	.word	0x40004400
 8003c44:	40004800 	.word	0x40004800
 8003c48:	40004c00 	.word	0x40004c00
 8003c4c:	40005000 	.word	0x40005000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	40007800 	.word	0x40007800
 8003c58:	2310      	movs	r3, #16
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e02c      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a72      	ldr	r2, [pc, #456]	; (8003e2c <UART_SetConfig+0x4bc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d125      	bne.n	8003cb4 <UART_SetConfig+0x344>
 8003c68:	4b71      	ldr	r3, [pc, #452]	; (8003e30 <UART_SetConfig+0x4c0>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c76:	d017      	beq.n	8003ca8 <UART_SetConfig+0x338>
 8003c78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c7c:	d817      	bhi.n	8003cae <UART_SetConfig+0x33e>
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d00b      	beq.n	8003c9c <UART_SetConfig+0x32c>
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c88:	d811      	bhi.n	8003cae <UART_SetConfig+0x33e>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <UART_SetConfig+0x326>
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c92:	d006      	beq.n	8003ca2 <UART_SetConfig+0x332>
 8003c94:	e00b      	b.n	8003cae <UART_SetConfig+0x33e>
 8003c96:	2300      	movs	r3, #0
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e00d      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e00a      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e007      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e004      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003cae:	2310      	movs	r3, #16
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e001      	b.n	8003cb8 <UART_SetConfig+0x348>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d15b      	bne.n	8003d7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cc2:	7ffb      	ldrb	r3, [r7, #31]
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d828      	bhi.n	8003d1a <UART_SetConfig+0x3aa>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x360>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7fe fcfa 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003cf8:	61b8      	str	r0, [r7, #24]
        break;
 8003cfa:	e013      	b.n	8003d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7fe fd0a 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003d00:	61b8      	str	r0, [r7, #24]
        break;
 8003d02:	e00f      	b.n	8003d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <UART_SetConfig+0x4c4>)
 8003d06:	61bb      	str	r3, [r7, #24]
        break;
 8003d08:	e00c      	b.n	8003d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe fc1d 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003d0e:	61b8      	str	r0, [r7, #24]
        break;
 8003d10:	e008      	b.n	8003d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	61bb      	str	r3, [r7, #24]
        break;
 8003d18:	e004      	b.n	8003d24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	77bb      	strb	r3, [r7, #30]
        break;
 8003d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d074      	beq.n	8003e14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	005a      	lsls	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	441a      	add	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b0f      	cmp	r3, #15
 8003d44:	d916      	bls.n	8003d74 <UART_SetConfig+0x404>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d212      	bcs.n	8003d74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	f023 030f 	bic.w	r3, r3, #15
 8003d56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	89fa      	ldrh	r2, [r7, #14]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	e04f      	b.n	8003e14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	77bb      	strb	r3, [r7, #30]
 8003d78:	e04c      	b.n	8003e14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d828      	bhi.n	8003dd2 <UART_SetConfig+0x462>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <UART_SetConfig+0x418>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003dbd 	.word	0x08003dbd
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003dc3 	.word	0x08003dc3
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dd3 	.word	0x08003dd3
 8003da4:	08003dd3 	.word	0x08003dd3
 8003da8:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dac:	f7fe fc9e 	bl	80026ec <HAL_RCC_GetPCLK1Freq>
 8003db0:	61b8      	str	r0, [r7, #24]
        break;
 8003db2:	e013      	b.n	8003ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db4:	f7fe fcae 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
 8003db8:	61b8      	str	r0, [r7, #24]
        break;
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <UART_SetConfig+0x4c4>)
 8003dbe:	61bb      	str	r3, [r7, #24]
        break;
 8003dc0:	e00c      	b.n	8003ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc2:	f7fe fbc1 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003dc6:	61b8      	str	r0, [r7, #24]
        break;
 8003dc8:	e008      	b.n	8003ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e004      	b.n	8003ddc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003dda:	bf00      	nop
    }

    if (pclk != 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	085a      	lsrs	r2, r3, #1
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	441a      	add	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d909      	bls.n	8003e10 <UART_SetConfig+0x4a0>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e02:	d205      	bcs.n	8003e10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e001      	b.n	8003e14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3720      	adds	r7, #32
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40007c00 	.word	0x40007c00
 8003e30:	40023800 	.word	0x40023800
 8003e34:	00f42400 	.word	0x00f42400

08003e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01a      	beq.n	8003f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f36:	d10a      	bne.n	8003f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f8c:	f7fd fbda 	bl	8001744 <HAL_GetTick>
 8003f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d10e      	bne.n	8003fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f81b 	bl	8003fea <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e011      	b.n	8003fe2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b09c      	sub	sp, #112	; 0x70
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	e0a7      	b.n	800414c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	f000 80a3 	beq.w	800414c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7fd fb9d 	bl	8001744 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <UART_WaitOnFlagUntilTimeout+0x32>
 8004016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004018:	2b00      	cmp	r3, #0
 800401a:	d13f      	bne.n	800409c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800402a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800402c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004030:	667b      	str	r3, [r7, #100]	; 0x64
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800403a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800403c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e6      	bne.n	800401c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800405e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004060:	f023 0301 	bic.w	r3, r3, #1
 8004064:	663b      	str	r3, [r7, #96]	; 0x60
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3308      	adds	r3, #8
 800406c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800407c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e5      	bne.n	800404e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e068      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d050      	beq.n	800414c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b8:	d148      	bne.n	800414c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
 80040e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	613b      	str	r3, [r7, #16]
   return(result);
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	66bb      	str	r3, [r7, #104]	; 0x68
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004116:	623a      	str	r2, [r7, #32]
 8004118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	69f9      	ldr	r1, [r7, #28]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	61bb      	str	r3, [r7, #24]
   return(result);
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2220      	movs	r2, #32
 800412e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e010      	b.n	800416e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4013      	ands	r3, r2
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	429a      	cmp	r2, r3
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	429a      	cmp	r2, r3
 8004168:	f43f af48 	beq.w	8003ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3770      	adds	r7, #112	; 0x70
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004176:	b480      	push	{r7}
 8004178:	b085      	sub	sp, #20
 800417a:	af00      	add	r7, sp, #0
 800417c:	4603      	mov	r3, r0
 800417e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004188:	2b84      	cmp	r3, #132	; 0x84
 800418a:	d005      	beq.n	8004198 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800418c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	3303      	adds	r3, #3
 8004196:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041aa:	f000 feb1 	bl	8004f10 <vTaskStartScheduler>
  
  return osOK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b6:	b089      	sub	sp, #36	; 0x24
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d020      	beq.n	8004208 <osThreadCreate+0x54>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d01c      	beq.n	8004208 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685c      	ldr	r4, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681d      	ldr	r5, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691e      	ldr	r6, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ffc8 	bl	8004176 <makeFreeRtosPriority>
 80041e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041f0:	9202      	str	r2, [sp, #8]
 80041f2:	9301      	str	r3, [sp, #4]
 80041f4:	9100      	str	r1, [sp, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	4632      	mov	r2, r6
 80041fa:	4629      	mov	r1, r5
 80041fc:	4620      	mov	r0, r4
 80041fe:	f000 fcb5 	bl	8004b6c <xTaskCreateStatic>
 8004202:	4603      	mov	r3, r0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	e01c      	b.n	8004242 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685c      	ldr	r4, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004214:	b29e      	uxth	r6, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ffaa 	bl	8004176 <makeFreeRtosPriority>
 8004222:	4602      	mov	r2, r0
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	9200      	str	r2, [sp, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	4632      	mov	r2, r6
 8004230:	4629      	mov	r1, r5
 8004232:	4620      	mov	r0, r4
 8004234:	f000 fcfd 	bl	8004c32 <xTaskCreate>
 8004238:	4603      	mov	r3, r0
 800423a:	2b01      	cmp	r3, #1
 800423c:	d001      	beq.n	8004242 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800424c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <osDelay+0x16>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	e000      	b.n	8004264 <osDelay+0x18>
 8004262:	2301      	movs	r3, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fe1d 	bl	8004ea4 <vTaskDelay>
  
  return osOK;
 800426a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f103 0208 	add.w	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f103 0208 	add.w	r2, r3, #8
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f103 0208 	add.w	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004316:	b480      	push	{r7}
 8004318:	b085      	sub	sp, #20
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d103      	bne.n	8004336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e00c      	b.n	8004350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3308      	adds	r3, #8
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	e002      	b.n	8004344 <vListInsert+0x2e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d2f6      	bcs.n	800433e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	601a      	str	r2, [r3, #0]
}
 800437c:	bf00      	nop
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6892      	ldr	r2, [r2, #8]
 800439e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6852      	ldr	r2, [r2, #4]
 80043a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d103      	bne.n	80043bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	1e5a      	subs	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10c      	bne.n	800440a <xQueueGenericReset+0x2e>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	b672      	cpsid	i
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	b662      	cpsie	i
 8004404:	60bb      	str	r3, [r7, #8]
}
 8004406:	bf00      	nop
 8004408:	e7fe      	b.n	8004408 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800440a:	f001 fbaf 	bl	8005b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	441a      	add	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	3b01      	subs	r3, #1
 800443c:	68f9      	ldr	r1, [r7, #12]
 800443e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	441a      	add	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	22ff      	movs	r2, #255	; 0xff
 800444e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	; 0xff
 8004456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d114      	bne.n	800448a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01a      	beq.n	800449e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3310      	adds	r3, #16
 800446c:	4618      	mov	r0, r3
 800446e:	f000 ff9d 	bl	80053ac <xTaskRemoveFromEventList>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <xQueueGenericReset+0xd0>)
 800447a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	e009      	b.n	800449e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3310      	adds	r3, #16
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff fef0 	bl	8004274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff feeb 	bl	8004274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800449e:	f001 fb99 	bl	8005bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044a2:	2301      	movs	r3, #1
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	4613      	mov	r3, r2
 80044bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <xQueueGenericCreate+0x2e>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	b672      	cpsid	i
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	b662      	cpsie	i
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d102      	bne.n	80044ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e004      	b.n	80044f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	fb02 f303 	mul.w	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3348      	adds	r3, #72	; 0x48
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 fc1f 	bl	8005d3c <pvPortMalloc>
 80044fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d011      	beq.n	800452a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	3348      	adds	r3, #72	; 0x48
 800450e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004518:	79fa      	ldrb	r2, [r7, #7]
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f805 	bl	8004534 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800452a:	69bb      	ldr	r3, [r7, #24]
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3720      	adds	r7, #32
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d103      	bne.n	8004550 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e002      	b.n	8004556 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004562:	2101      	movs	r1, #1
 8004564:	69b8      	ldr	r0, [r7, #24]
 8004566:	f7ff ff39 	bl	80043dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08e      	sub	sp, #56	; 0x38
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004582:	2300      	movs	r3, #0
 8004584:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10c      	bne.n	80045aa <xQueueGenericSend+0x36>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	b672      	cpsid	i
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	b662      	cpsie	i
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80045a6:	bf00      	nop
 80045a8:	e7fe      	b.n	80045a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d103      	bne.n	80045b8 <xQueueGenericSend+0x44>
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <xQueueGenericSend+0x48>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <xQueueGenericSend+0x4a>
 80045bc:	2300      	movs	r3, #0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10c      	bne.n	80045dc <xQueueGenericSend+0x68>
	__asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	b672      	cpsid	i
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	b662      	cpsie	i
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d103      	bne.n	80045ea <xQueueGenericSend+0x76>
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <xQueueGenericSend+0x7a>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <xQueueGenericSend+0x7c>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10c      	bne.n	800460e <xQueueGenericSend+0x9a>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	b672      	cpsid	i
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	b662      	cpsie	i
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800460e:	f001 f891 	bl	8005734 <xTaskGetSchedulerState>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <xQueueGenericSend+0xaa>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <xQueueGenericSend+0xae>
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <xQueueGenericSend+0xb0>
 8004622:	2300      	movs	r3, #0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10c      	bne.n	8004642 <xQueueGenericSend+0xce>
	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	b672      	cpsid	i
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	b662      	cpsie	i
 800463c:	61fb      	str	r3, [r7, #28]
}
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004642:	f001 fa93 	bl	8005b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464e:	429a      	cmp	r2, r3
 8004650:	d302      	bcc.n	8004658 <xQueueGenericSend+0xe4>
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d129      	bne.n	80046ac <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800465e:	f000 f975 	bl	800494c <prvCopyDataToQueue>
 8004662:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fe9b 	bl	80053ac <xTaskRemoveFromEventList>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800467c:	4b3f      	ldr	r3, [pc, #252]	; (800477c <xQueueGenericSend+0x208>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	e00a      	b.n	80046a4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d007      	beq.n	80046a4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004694:	4b39      	ldr	r3, [pc, #228]	; (800477c <xQueueGenericSend+0x208>)
 8004696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80046a4:	f001 fa96 	bl	8005bd4 <vPortExitCritical>
				return pdPASS;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e063      	b.n	8004774 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046b2:	f001 fa8f 	bl	8005bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e05c      	b.n	8004774 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fed5 	bl	8005474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046ca:	2301      	movs	r3, #1
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046ce:	f001 fa81 	bl	8005bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046d2:	f000 fc81 	bl	8004fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046d6:	f001 fa49 	bl	8005b6c <vPortEnterCritical>
 80046da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046e0:	b25b      	sxtb	r3, r3
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d103      	bne.n	80046f0 <xQueueGenericSend+0x17c>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f6:	b25b      	sxtb	r3, r3
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d103      	bne.n	8004706 <xQueueGenericSend+0x192>
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004706:	f001 fa65 	bl	8005bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800470a:	1d3a      	adds	r2, r7, #4
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fec4 	bl	80054a0 <xTaskCheckForTimeOut>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d124      	bne.n	8004768 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800471e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004720:	f000 fa0c 	bl	8004b3c <prvIsQueueFull>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d018      	beq.n	800475c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	3310      	adds	r3, #16
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4611      	mov	r1, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fe14 	bl	8005360 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800473a:	f000 f997 	bl	8004a6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800473e:	f000 fc59 	bl	8004ff4 <xTaskResumeAll>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f47f af7c 	bne.w	8004642 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <xQueueGenericSend+0x208>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	e772      	b.n	8004642 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800475c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800475e:	f000 f985 	bl	8004a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004762:	f000 fc47 	bl	8004ff4 <xTaskResumeAll>
 8004766:	e76c      	b.n	8004642 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476a:	f000 f97f 	bl	8004a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800476e:	f000 fc41 	bl	8004ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004772:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004774:	4618      	mov	r0, r3
 8004776:	3738      	adds	r7, #56	; 0x38
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08c      	sub	sp, #48	; 0x30
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800478c:	2300      	movs	r3, #0
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10c      	bne.n	80047b4 <xQueueReceive+0x34>
	__asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	b672      	cpsid	i
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	b662      	cpsie	i
 80047ae:	623b      	str	r3, [r7, #32]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <xQueueReceive+0x42>
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <xQueueReceive+0x46>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <xQueueReceive+0x48>
 80047c6:	2300      	movs	r3, #0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10c      	bne.n	80047e6 <xQueueReceive+0x66>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	b672      	cpsid	i
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	b662      	cpsie	i
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047e6:	f000 ffa5 	bl	8005734 <xTaskGetSchedulerState>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <xQueueReceive+0x76>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <xQueueReceive+0x7a>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <xQueueReceive+0x7c>
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <xQueueReceive+0x9a>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	b672      	cpsid	i
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	b662      	cpsie	i
 8004814:	61bb      	str	r3, [r7, #24]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800481a:	f001 f9a7 	bl	8005b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01f      	beq.n	800486a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800482a:	68b9      	ldr	r1, [r7, #8]
 800482c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800482e:	f000 f8f7 	bl	8004a20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1e5a      	subs	r2, r3, #1
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00f      	beq.n	8004862 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	3310      	adds	r3, #16
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fdb0 	bl	80053ac <xTaskRemoveFromEventList>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004852:	4b3d      	ldr	r3, [pc, #244]	; (8004948 <xQueueReceive+0x1c8>)
 8004854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004862:	f001 f9b7 	bl	8005bd4 <vPortExitCritical>
				return pdPASS;
 8004866:	2301      	movs	r3, #1
 8004868:	e069      	b.n	800493e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004870:	f001 f9b0 	bl	8005bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004874:	2300      	movs	r3, #0
 8004876:	e062      	b.n	800493e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800487e:	f107 0310 	add.w	r3, r7, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fdf6 	bl	8005474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004888:	2301      	movs	r3, #1
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800488c:	f001 f9a2 	bl	8005bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004890:	f000 fba2 	bl	8004fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004894:	f001 f96a 	bl	8005b6c <vPortEnterCritical>
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800489e:	b25b      	sxtb	r3, r3
 80048a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a4:	d103      	bne.n	80048ae <xQueueReceive+0x12e>
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b4:	b25b      	sxtb	r3, r3
 80048b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ba:	d103      	bne.n	80048c4 <xQueueReceive+0x144>
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c4:	f001 f986 	bl	8005bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048c8:	1d3a      	adds	r2, r7, #4
 80048ca:	f107 0310 	add.w	r3, r7, #16
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fde5 	bl	80054a0 <xTaskCheckForTimeOut>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d123      	bne.n	8004924 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048de:	f000 f917 	bl	8004b10 <prvIsQueueEmpty>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d017      	beq.n	8004918 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4611      	mov	r1, r2
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fd35 	bl	8005360 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048f8:	f000 f8b8 	bl	8004a6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048fc:	f000 fb7a 	bl	8004ff4 <xTaskResumeAll>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d189      	bne.n	800481a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8004906:	4b10      	ldr	r3, [pc, #64]	; (8004948 <xQueueReceive+0x1c8>)
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	e780      	b.n	800481a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491a:	f000 f8a7 	bl	8004a6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800491e:	f000 fb69 	bl	8004ff4 <xTaskResumeAll>
 8004922:	e77a      	b.n	800481a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004926:	f000 f8a1 	bl	8004a6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800492a:	f000 fb63 	bl	8004ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800492e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004930:	f000 f8ee 	bl	8004b10 <prvIsQueueEmpty>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f43f af6f 	beq.w	800481a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800493c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d14d      	bne.n	8004a0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fefa 	bl	8005770 <xTaskPriorityDisinherit>
 800497c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
 8004984:	e043      	b.n	8004a0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d119      	bne.n	80049c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6858      	ldr	r0, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	461a      	mov	r2, r3
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	f001 fbde 	bl	8006158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d32b      	bcc.n	8004a0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	e026      	b.n	8004a0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68d8      	ldr	r0, [r3, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	461a      	mov	r2, r3
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	f001 fbc4 	bl	8006158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	425b      	negs	r3, r3
 80049da:	441a      	add	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d207      	bcs.n	80049fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	425b      	negs	r3, r3
 80049f6:	441a      	add	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d105      	bne.n	8004a0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a16:	697b      	ldr	r3, [r7, #20]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d018      	beq.n	8004a64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	441a      	add	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d303      	bcc.n	8004a54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68d9      	ldr	r1, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6838      	ldr	r0, [r7, #0]
 8004a60:	f001 fb7a 	bl	8006158 <memcpy>
	}
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a74:	f001 f87a 	bl	8005b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a80:	e011      	b.n	8004aa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d012      	beq.n	8004ab0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3324      	adds	r3, #36	; 0x24
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fc8c 	bl	80053ac <xTaskRemoveFromEventList>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a9a:	f000 fd67 	bl	800556c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dce9      	bgt.n	8004a82 <prvUnlockQueue+0x16>
 8004aae:	e000      	b.n	8004ab2 <prvUnlockQueue+0x46>
					break;
 8004ab0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	22ff      	movs	r2, #255	; 0xff
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004aba:	f001 f88b 	bl	8005bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004abe:	f001 f855 	bl	8005b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ac8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aca:	e011      	b.n	8004af0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3310      	adds	r3, #16
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f000 fc67 	bl	80053ac <xTaskRemoveFromEventList>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ae4:	f000 fd42 	bl	800556c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ae8:	7bbb      	ldrb	r3, [r7, #14]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	dce9      	bgt.n	8004acc <prvUnlockQueue+0x60>
 8004af8:	e000      	b.n	8004afc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004afa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b04:	f001 f866 	bl	8005bd4 <vPortExitCritical>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b18:	f001 f828 	bl	8005b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e001      	b.n	8004b2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b2e:	f001 f851 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8004b32:	68fb      	ldr	r3, [r7, #12]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b44:	f001 f812 	bl	8005b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d102      	bne.n	8004b5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e001      	b.n	8004b5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b5e:	f001 f839 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 8004b62:	68fb      	ldr	r3, [r7, #12]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08e      	sub	sp, #56	; 0x38
 8004b70:	af04      	add	r7, sp, #16
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10c      	bne.n	8004b9a <xTaskCreateStatic+0x2e>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	b672      	cpsid	i
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	b662      	cpsie	i
 8004b94:	623b      	str	r3, [r7, #32]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10c      	bne.n	8004bba <xTaskCreateStatic+0x4e>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	b672      	cpsid	i
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	b662      	cpsie	i
 8004bb4:	61fb      	str	r3, [r7, #28]
}
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bba:	2354      	movs	r3, #84	; 0x54
 8004bbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b54      	cmp	r3, #84	; 0x54
 8004bc2:	d00c      	beq.n	8004bde <xTaskCreateStatic+0x72>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	b672      	cpsid	i
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	b662      	cpsie	i
 8004bd8:	61bb      	str	r3, [r7, #24]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01e      	beq.n	8004c24 <xTaskCreateStatic+0xb8>
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	f107 0314 	add.w	r3, r7, #20
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f850 	bl	8004cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1e:	f000 f8d7 	bl	8004dd0 <prvAddNewTaskToReadyList>
 8004c22:	e001      	b.n	8004c28 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c28:	697b      	ldr	r3, [r7, #20]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3728      	adds	r7, #40	; 0x28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b08c      	sub	sp, #48	; 0x30
 8004c36:	af04      	add	r7, sp, #16
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	603b      	str	r3, [r7, #0]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f878 	bl	8005d3c <pvPortMalloc>
 8004c4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00e      	beq.n	8004c72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c54:	2054      	movs	r0, #84	; 0x54
 8004c56:	f001 f871 	bl	8005d3c <pvPortMalloc>
 8004c5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
 8004c68:	e005      	b.n	8004c76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	f001 f930 	bl	8005ed0 <vPortFree>
 8004c70:	e001      	b.n	8004c76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d017      	beq.n	8004cac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9303      	str	r3, [sp, #12]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	9302      	str	r3, [sp, #8]
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f80e 	bl	8004cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ca0:	69f8      	ldr	r0, [r7, #28]
 8004ca2:	f000 f895 	bl	8004dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e002      	b.n	8004cb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004cd4:	440b      	add	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f023 0307 	bic.w	r3, r3, #7
 8004ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	617b      	str	r3, [r7, #20]
}
 8004d04:	bf00      	nop
 8004d06:	e7fe      	b.n	8004d06 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01f      	beq.n	8004d4e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e012      	b.n	8004d3a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	4413      	add	r3, r2
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4413      	add	r3, r2
 8004d22:	3334      	adds	r3, #52	; 0x34
 8004d24:	460a      	mov	r2, r1
 8004d26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d9e9      	bls.n	8004d14 <prvInitialiseNewTask+0x58>
 8004d40:	e000      	b.n	8004d44 <prvInitialiseNewTask+0x88>
			{
				break;
 8004d42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d4c:	e003      	b.n	8004d56 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d901      	bls.n	8004d60 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d5c:	2306      	movs	r3, #6
 8004d5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2200      	movs	r2, #0
 8004d70:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	3304      	adds	r3, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fa9c 	bl	80042b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	3318      	adds	r3, #24
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fa97 	bl	80042b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	f1c3 0207 	rsb	r2, r3, #7
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	2200      	movs	r2, #0
 8004da0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	69b8      	ldr	r0, [r7, #24]
 8004db0:	f000 fdce 	bl	8005950 <pxPortInitialiseStack>
 8004db4:	4602      	mov	r2, r0
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc6:	bf00      	nop
 8004dc8:	3720      	adds	r7, #32
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004dd8:	f000 fec8 	bl	8005b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004de6:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dee:	4a27      	ldr	r2, [pc, #156]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <prvAddNewTaskToReadyList+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d110      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dfc:	f000 fbda 	bl	80055b4 <prvInitialiseTaskLists>
 8004e00:	e00d      	b.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d802      	bhi.n	8004e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e18:	4a1c      	ldr	r2, [pc, #112]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <prvAddNewTaskToReadyList+0xc4>)
 8004e26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	4b19      	ldr	r3, [pc, #100]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <prvAddNewTaskToReadyList+0xc8>)
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a15      	ldr	r2, [pc, #84]	; (8004e9c <prvAddNewTaskToReadyList+0xcc>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7ff fa3c 	bl	80042ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e56:	f000 febd 	bl	8005bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <prvAddNewTaskToReadyList+0xc0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <prvAddNewTaskToReadyList+0xbc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d207      	bcs.n	8004e80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <prvAddNewTaskToReadyList+0xd0>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200004e8 	.word	0x200004e8
 8004e8c:	200003e8 	.word	0x200003e8
 8004e90:	200004f4 	.word	0x200004f4
 8004e94:	20000504 	.word	0x20000504
 8004e98:	200004f0 	.word	0x200004f0
 8004e9c:	200003ec 	.word	0x200003ec
 8004ea0:	e000ed04 	.word	0xe000ed04

08004ea4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d019      	beq.n	8004eea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eb6:	4b14      	ldr	r3, [pc, #80]	; (8004f08 <vTaskDelay+0x64>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <vTaskDelay+0x34>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	b672      	cpsid	i
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	b662      	cpsie	i
 8004ed2:	60bb      	str	r3, [r7, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	e7fe      	b.n	8004ed6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004ed8:	f000 f87e 	bl	8004fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004edc:	2100      	movs	r1, #0
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fcd0 	bl	8005884 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ee4:	f000 f886 	bl	8004ff4 <xTaskResumeAll>
 8004ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <vTaskDelay+0x68>)
 8004ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000510 	.word	0x20000510
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f1e:	463a      	mov	r2, r7
 8004f20:	1d39      	adds	r1, r7, #4
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fb fb44 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	9202      	str	r2, [sp, #8]
 8004f34:	9301      	str	r3, [sp, #4]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	4920      	ldr	r1, [pc, #128]	; (8004fc0 <vTaskStartScheduler+0xb0>)
 8004f40:	4820      	ldr	r0, [pc, #128]	; (8004fc4 <vTaskStartScheduler+0xb4>)
 8004f42:	f7ff fe13 	bl	8004b6c <xTaskCreateStatic>
 8004f46:	4603      	mov	r3, r0
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <vTaskStartScheduler+0xb8>)
 8004f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <vTaskStartScheduler+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f54:	2301      	movs	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e001      	b.n	8004f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d118      	bne.n	8004f96 <vTaskStartScheduler+0x86>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	b672      	cpsid	i
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	b662      	cpsie	i
 8004f78:	613b      	str	r3, [r7, #16]
}
 8004f7a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7c:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <vTaskStartScheduler+0xbc>)
 8004f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f84:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <vTaskStartScheduler+0xc0>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <vTaskStartScheduler+0xc4>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f90:	f000 fd6e 	bl	8005a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f94:	e010      	b.n	8004fb8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d10c      	bne.n	8004fb8 <vTaskStartScheduler+0xa8>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	b672      	cpsid	i
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	b662      	cpsie	i
 8004fb2:	60fb      	str	r3, [r7, #12]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vTaskStartScheduler+0xa6>
}
 8004fb8:	bf00      	nop
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	08007280 	.word	0x08007280
 8004fc4:	08005585 	.word	0x08005585
 8004fc8:	2000050c 	.word	0x2000050c
 8004fcc:	20000508 	.word	0x20000508
 8004fd0:	200004f4 	.word	0x200004f4
 8004fd4:	200004ec 	.word	0x200004ec

08004fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <vTaskSuspendAll+0x18>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	4a03      	ldr	r2, [pc, #12]	; (8004ff0 <vTaskSuspendAll+0x18>)
 8004fe4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	20000510 	.word	0x20000510

08004ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005002:	4b42      	ldr	r3, [pc, #264]	; (800510c <xTaskResumeAll+0x118>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10c      	bne.n	8005024 <xTaskResumeAll+0x30>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500e:	b672      	cpsid	i
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	b662      	cpsie	i
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005024:	f000 fda2 	bl	8005b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005028:	4b38      	ldr	r3, [pc, #224]	; (800510c <xTaskResumeAll+0x118>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3b01      	subs	r3, #1
 800502e:	4a37      	ldr	r2, [pc, #220]	; (800510c <xTaskResumeAll+0x118>)
 8005030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <xTaskResumeAll+0x118>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d161      	bne.n	80050fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800503a:	4b35      	ldr	r3, [pc, #212]	; (8005110 <xTaskResumeAll+0x11c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d05d      	beq.n	80050fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005042:	e02e      	b.n	80050a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005044:	4b33      	ldr	r3, [pc, #204]	; (8005114 <xTaskResumeAll+0x120>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	3318      	adds	r3, #24
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff f999 	bl	8004388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff f994 	bl	8004388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	2201      	movs	r2, #1
 8005066:	409a      	lsls	r2, r3
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <xTaskResumeAll+0x124>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4313      	orrs	r3, r2
 800506e:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <xTaskResumeAll+0x124>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <xTaskResumeAll+0x128>)
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7ff f920 	bl	80042ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005092:	4b23      	ldr	r3, [pc, #140]	; (8005120 <xTaskResumeAll+0x12c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800509c:	4b21      	ldr	r3, [pc, #132]	; (8005124 <xTaskResumeAll+0x130>)
 800509e:	2201      	movs	r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <xTaskResumeAll+0x120>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1cc      	bne.n	8005044 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050b0:	f000 fb20 	bl	80056f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050b4:	4b1c      	ldr	r3, [pc, #112]	; (8005128 <xTaskResumeAll+0x134>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d010      	beq.n	80050e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050c0:	f000 f836 	bl	8005130 <xTaskIncrementTick>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80050ca:	4b16      	ldr	r3, [pc, #88]	; (8005124 <xTaskResumeAll+0x130>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <xTaskResumeAll+0x134>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050e2:	4b10      	ldr	r3, [pc, #64]	; (8005124 <xTaskResumeAll+0x130>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050ea:	2301      	movs	r3, #1
 80050ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <xTaskResumeAll+0x138>)
 80050f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050fe:	f000 fd69 	bl	8005bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005102:	68bb      	ldr	r3, [r7, #8]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	20000510 	.word	0x20000510
 8005110:	200004e8 	.word	0x200004e8
 8005114:	200004a8 	.word	0x200004a8
 8005118:	200004f0 	.word	0x200004f0
 800511c:	200003ec 	.word	0x200003ec
 8005120:	200003e8 	.word	0x200003e8
 8005124:	200004fc 	.word	0x200004fc
 8005128:	200004f8 	.word	0x200004f8
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800513a:	4b4f      	ldr	r3, [pc, #316]	; (8005278 <xTaskIncrementTick+0x148>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 808a 	bne.w	8005258 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005144:	4b4d      	ldr	r3, [pc, #308]	; (800527c <xTaskIncrementTick+0x14c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3301      	adds	r3, #1
 800514a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800514c:	4a4b      	ldr	r2, [pc, #300]	; (800527c <xTaskIncrementTick+0x14c>)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d122      	bne.n	800519e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005158:	4b49      	ldr	r3, [pc, #292]	; (8005280 <xTaskIncrementTick+0x150>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00c      	beq.n	800517c <xTaskIncrementTick+0x4c>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	b672      	cpsid	i
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	b662      	cpsie	i
 8005176:	603b      	str	r3, [r7, #0]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <xTaskIncrementTick+0x4a>
 800517c:	4b40      	ldr	r3, [pc, #256]	; (8005280 <xTaskIncrementTick+0x150>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	4b40      	ldr	r3, [pc, #256]	; (8005284 <xTaskIncrementTick+0x154>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <xTaskIncrementTick+0x150>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	4a3e      	ldr	r2, [pc, #248]	; (8005284 <xTaskIncrementTick+0x154>)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	4b3d      	ldr	r3, [pc, #244]	; (8005288 <xTaskIncrementTick+0x158>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <xTaskIncrementTick+0x158>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	f000 faab 	bl	80056f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <xTaskIncrementTick+0x15c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d348      	bcc.n	800523a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a8:	4b35      	ldr	r3, [pc, #212]	; (8005280 <xTaskIncrementTick+0x150>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b2:	4b36      	ldr	r3, [pc, #216]	; (800528c <xTaskIncrementTick+0x15c>)
 80051b4:	f04f 32ff 	mov.w	r2, #4294967295
 80051b8:	601a      	str	r2, [r3, #0]
					break;
 80051ba:	e03e      	b.n	800523a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051bc:	4b30      	ldr	r3, [pc, #192]	; (8005280 <xTaskIncrementTick+0x150>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d203      	bcs.n	80051dc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051d4:	4a2d      	ldr	r2, [pc, #180]	; (800528c <xTaskIncrementTick+0x15c>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051da:	e02e      	b.n	800523a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	3304      	adds	r3, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff f8d1 	bl	8004388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3318      	adds	r3, #24
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f8c8 	bl	8004388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	2201      	movs	r2, #1
 80051fe:	409a      	lsls	r2, r3
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <xTaskIncrementTick+0x160>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4313      	orrs	r3, r2
 8005206:	4a22      	ldr	r2, [pc, #136]	; (8005290 <xTaskIncrementTick+0x160>)
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <xTaskIncrementTick+0x164>)
 8005218:	441a      	add	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	3304      	adds	r3, #4
 800521e:	4619      	mov	r1, r3
 8005220:	4610      	mov	r0, r2
 8005222:	f7ff f854 	bl	80042ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <xTaskIncrementTick+0x168>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	429a      	cmp	r2, r3
 8005232:	d3b9      	bcc.n	80051a8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005234:	2301      	movs	r3, #1
 8005236:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005238:	e7b6      	b.n	80051a8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800523a:	4b17      	ldr	r3, [pc, #92]	; (8005298 <xTaskIncrementTick+0x168>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	4914      	ldr	r1, [pc, #80]	; (8005294 <xTaskIncrementTick+0x164>)
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d907      	bls.n	8005262 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e004      	b.n	8005262 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005258:	4b10      	ldr	r3, [pc, #64]	; (800529c <xTaskIncrementTick+0x16c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a0f      	ldr	r2, [pc, #60]	; (800529c <xTaskIncrementTick+0x16c>)
 8005260:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <xTaskIncrementTick+0x170>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800526a:	2301      	movs	r3, #1
 800526c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20000510 	.word	0x20000510
 800527c:	200004ec 	.word	0x200004ec
 8005280:	200004a0 	.word	0x200004a0
 8005284:	200004a4 	.word	0x200004a4
 8005288:	20000500 	.word	0x20000500
 800528c:	20000508 	.word	0x20000508
 8005290:	200004f0 	.word	0x200004f0
 8005294:	200003ec 	.word	0x200003ec
 8005298:	200003e8 	.word	0x200003e8
 800529c:	200004f8 	.word	0x200004f8
 80052a0:	200004fc 	.word	0x200004fc

080052a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052aa:	4b28      	ldr	r3, [pc, #160]	; (800534c <vTaskSwitchContext+0xa8>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052b2:	4b27      	ldr	r3, [pc, #156]	; (8005350 <vTaskSwitchContext+0xac>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052b8:	e041      	b.n	800533e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80052ba:	4b25      	ldr	r3, [pc, #148]	; (8005350 <vTaskSwitchContext+0xac>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c0:	4b24      	ldr	r3, [pc, #144]	; (8005354 <vTaskSwitchContext+0xb0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	fab3 f383 	clz	r3, r3
 80052cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80052ce:	7afb      	ldrb	r3, [r7, #11]
 80052d0:	f1c3 031f 	rsb	r3, r3, #31
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	4920      	ldr	r1, [pc, #128]	; (8005358 <vTaskSwitchContext+0xb4>)
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <vTaskSwitchContext+0x60>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	b672      	cpsid	i
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	b662      	cpsie	i
 80052fe:	607b      	str	r3, [r7, #4]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <vTaskSwitchContext+0x5e>
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4613      	mov	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4a12      	ldr	r2, [pc, #72]	; (8005358 <vTaskSwitchContext+0xb4>)
 8005310:	4413      	add	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3308      	adds	r3, #8
 8005326:	429a      	cmp	r2, r3
 8005328:	d104      	bne.n	8005334 <vTaskSwitchContext+0x90>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <vTaskSwitchContext+0xb8>)
 800533c:	6013      	str	r3, [r2, #0]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000510 	.word	0x20000510
 8005350:	200004fc 	.word	0x200004fc
 8005354:	200004f0 	.word	0x200004f0
 8005358:	200003ec 	.word	0x200003ec
 800535c:	200003e8 	.word	0x200003e8

08005360 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	b672      	cpsid	i
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	b662      	cpsie	i
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800538a:	4b07      	ldr	r3, [pc, #28]	; (80053a8 <vTaskPlaceOnEventList+0x48>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3318      	adds	r3, #24
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fe ffbf 	bl	8004316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005398:	2101      	movs	r1, #1
 800539a:	6838      	ldr	r0, [r7, #0]
 800539c:	f000 fa72 	bl	8005884 <prvAddCurrentTaskToDelayedList>
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200003e8 	.word	0x200003e8

080053ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10c      	bne.n	80053dc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80053c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c6:	b672      	cpsid	i
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	b662      	cpsie	i
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	3318      	adds	r3, #24
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe ffd1 	bl	8004388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <xTaskRemoveFromEventList+0xb0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d11c      	bne.n	8005428 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fe ffc8 	bl	8004388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	2201      	movs	r2, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	4b17      	ldr	r3, [pc, #92]	; (8005460 <xTaskRemoveFromEventList+0xb4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4313      	orrs	r3, r2
 8005406:	4a16      	ldr	r2, [pc, #88]	; (8005460 <xTaskRemoveFromEventList+0xb4>)
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4a13      	ldr	r2, [pc, #76]	; (8005464 <xTaskRemoveFromEventList+0xb8>)
 8005418:	441a      	add	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fe ff54 	bl	80042ce <vListInsertEnd>
 8005426:	e005      	b.n	8005434 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	3318      	adds	r3, #24
 800542c:	4619      	mov	r1, r3
 800542e:	480e      	ldr	r0, [pc, #56]	; (8005468 <xTaskRemoveFromEventList+0xbc>)
 8005430:	f7fe ff4d 	bl	80042ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005438:	4b0c      	ldr	r3, [pc, #48]	; (800546c <xTaskRemoveFromEventList+0xc0>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d905      	bls.n	800544e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005442:	2301      	movs	r3, #1
 8005444:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <xTaskRemoveFromEventList+0xc4>)
 8005448:	2201      	movs	r2, #1
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	e001      	b.n	8005452 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005452:	697b      	ldr	r3, [r7, #20]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000510 	.word	0x20000510
 8005460:	200004f0 	.word	0x200004f0
 8005464:	200003ec 	.word	0x200003ec
 8005468:	200004a8 	.word	0x200004a8
 800546c:	200003e8 	.word	0x200003e8
 8005470:	200004fc 	.word	0x200004fc

08005474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <vTaskInternalSetTimeOutState+0x24>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <vTaskInternalSetTimeOutState+0x28>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	605a      	str	r2, [r3, #4]
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	20000500 	.word	0x20000500
 800549c:	200004ec 	.word	0x200004ec

080054a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10c      	bne.n	80054ca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	b672      	cpsid	i
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	b662      	cpsie	i
 80054c4:	613b      	str	r3, [r7, #16]
}
 80054c6:	bf00      	nop
 80054c8:	e7fe      	b.n	80054c8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10c      	bne.n	80054ea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	60fb      	str	r3, [r7, #12]
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80054ea:	f000 fb3f 	bl	8005b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <xTaskCheckForTimeOut+0xc4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d102      	bne.n	800550e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	e023      	b.n	8005556 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xTaskCheckForTimeOut+0xc8>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d007      	beq.n	800552a <xTaskCheckForTimeOut+0x8a>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	429a      	cmp	r2, r3
 8005522:	d302      	bcc.n	800552a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005524:	2301      	movs	r3, #1
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e015      	b.n	8005556 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	429a      	cmp	r2, r3
 8005532:	d20b      	bcs.n	800554c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	1ad2      	subs	r2, r2, r3
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff ff97 	bl	8005474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	61fb      	str	r3, [r7, #28]
 800554a:	e004      	b.n	8005556 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005552:	2301      	movs	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005556:	f000 fb3d 	bl	8005bd4 <vPortExitCritical>

	return xReturn;
 800555a:	69fb      	ldr	r3, [r7, #28]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	200004ec 	.word	0x200004ec
 8005568:	20000500 	.word	0x20000500

0800556c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <vTaskMissedYield+0x14>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	200004fc 	.word	0x200004fc

08005584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800558c:	f000 f852 	bl	8005634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005590:	4b06      	ldr	r3, [pc, #24]	; (80055ac <prvIdleTask+0x28>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d9f9      	bls.n	800558c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005598:	4b05      	ldr	r3, [pc, #20]	; (80055b0 <prvIdleTask+0x2c>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055a8:	e7f0      	b.n	800558c <prvIdleTask+0x8>
 80055aa:	bf00      	nop
 80055ac:	200003ec 	.word	0x200003ec
 80055b0:	e000ed04 	.word	0xe000ed04

080055b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055ba:	2300      	movs	r3, #0
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	e00c      	b.n	80055da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <prvInitialiseTaskLists+0x60>)
 80055cc:	4413      	add	r3, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fe fe50 	bl	8004274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3301      	adds	r3, #1
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d9ef      	bls.n	80055c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055e0:	480d      	ldr	r0, [pc, #52]	; (8005618 <prvInitialiseTaskLists+0x64>)
 80055e2:	f7fe fe47 	bl	8004274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055e6:	480d      	ldr	r0, [pc, #52]	; (800561c <prvInitialiseTaskLists+0x68>)
 80055e8:	f7fe fe44 	bl	8004274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055ec:	480c      	ldr	r0, [pc, #48]	; (8005620 <prvInitialiseTaskLists+0x6c>)
 80055ee:	f7fe fe41 	bl	8004274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055f2:	480c      	ldr	r0, [pc, #48]	; (8005624 <prvInitialiseTaskLists+0x70>)
 80055f4:	f7fe fe3e 	bl	8004274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055f8:	480b      	ldr	r0, [pc, #44]	; (8005628 <prvInitialiseTaskLists+0x74>)
 80055fa:	f7fe fe3b 	bl	8004274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055fe:	4b0b      	ldr	r3, [pc, #44]	; (800562c <prvInitialiseTaskLists+0x78>)
 8005600:	4a05      	ldr	r2, [pc, #20]	; (8005618 <prvInitialiseTaskLists+0x64>)
 8005602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005604:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <prvInitialiseTaskLists+0x7c>)
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <prvInitialiseTaskLists+0x68>)
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	200003ec 	.word	0x200003ec
 8005618:	20000478 	.word	0x20000478
 800561c:	2000048c 	.word	0x2000048c
 8005620:	200004a8 	.word	0x200004a8
 8005624:	200004bc 	.word	0x200004bc
 8005628:	200004d4 	.word	0x200004d4
 800562c:	200004a0 	.word	0x200004a0
 8005630:	200004a4 	.word	0x200004a4

08005634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800563a:	e019      	b.n	8005670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800563c:	f000 fa96 	bl	8005b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005640:	4b10      	ldr	r3, [pc, #64]	; (8005684 <prvCheckTasksWaitingTermination+0x50>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe fe9b 	bl	8004388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005652:	4b0d      	ldr	r3, [pc, #52]	; (8005688 <prvCheckTasksWaitingTermination+0x54>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3b01      	subs	r3, #1
 8005658:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <prvCheckTasksWaitingTermination+0x54>)
 800565a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3b01      	subs	r3, #1
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 8005664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005666:	f000 fab5 	bl	8005bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f810 	bl	8005690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <prvCheckTasksWaitingTermination+0x58>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e1      	bne.n	800563c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200004bc 	.word	0x200004bc
 8005688:	200004e8 	.word	0x200004e8
 800568c:	200004d0 	.word	0x200004d0

08005690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fc12 	bl	8005ed0 <vPortFree>
				vPortFree( pxTCB );
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fc0f 	bl	8005ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056b2:	e01a      	b.n	80056ea <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d103      	bne.n	80056c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 fc06 	bl	8005ed0 <vPortFree>
	}
 80056c4:	e011      	b.n	80056ea <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d00c      	beq.n	80056ea <prvDeleteTCB+0x5a>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	b672      	cpsid	i
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	b662      	cpsie	i
 80056e4:	60fb      	str	r3, [r7, #12]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <prvDeleteTCB+0x58>
	}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056fa:	4b0c      	ldr	r3, [pc, #48]	; (800572c <prvResetNextTaskUnblockTime+0x38>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005704:	4b0a      	ldr	r3, [pc, #40]	; (8005730 <prvResetNextTaskUnblockTime+0x3c>)
 8005706:	f04f 32ff 	mov.w	r2, #4294967295
 800570a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800570c:	e008      	b.n	8005720 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <prvResetNextTaskUnblockTime+0x38>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4a04      	ldr	r2, [pc, #16]	; (8005730 <prvResetNextTaskUnblockTime+0x3c>)
 800571e:	6013      	str	r3, [r2, #0]
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	200004a0 	.word	0x200004a0
 8005730:	20000508 	.word	0x20000508

08005734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <xTaskGetSchedulerState+0x34>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005742:	2301      	movs	r3, #1
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	e008      	b.n	800575a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005748:	4b08      	ldr	r3, [pc, #32]	; (800576c <xTaskGetSchedulerState+0x38>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005750:	2302      	movs	r3, #2
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	e001      	b.n	800575a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005756:	2300      	movs	r3, #0
 8005758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800575a:	687b      	ldr	r3, [r7, #4]
	}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	200004f4 	.word	0x200004f4
 800576c:	20000510 	.word	0x20000510

08005770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d072      	beq.n	800586c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005786:	4b3c      	ldr	r3, [pc, #240]	; (8005878 <xTaskPriorityDisinherit+0x108>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d00c      	beq.n	80057aa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	b672      	cpsid	i
 8005796:	f383 8811 	msr	BASEPRI, r3
 800579a:	f3bf 8f6f 	isb	sy
 800579e:	f3bf 8f4f 	dsb	sy
 80057a2:	b662      	cpsie	i
 80057a4:	60fb      	str	r3, [r7, #12]
}
 80057a6:	bf00      	nop
 80057a8:	e7fe      	b.n	80057a8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10c      	bne.n	80057cc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b6:	b672      	cpsid	i
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	b662      	cpsie	i
 80057c6:	60bb      	str	r3, [r7, #8]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d0:	1e5a      	subs	r2, r3, #1
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	429a      	cmp	r2, r3
 80057e0:	d044      	beq.n	800586c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d140      	bne.n	800586c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fdca 	bl	8004388 <uxListRemove>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d115      	bne.n	8005826 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fe:	491f      	ldr	r1, [pc, #124]	; (800587c <xTaskPriorityDisinherit+0x10c>)
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xTaskPriorityDisinherit+0xb6>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	2201      	movs	r2, #1
 8005816:	fa02 f303 	lsl.w	r3, r2, r3
 800581a:	43da      	mvns	r2, r3
 800581c:	4b18      	ldr	r3, [pc, #96]	; (8005880 <xTaskPriorityDisinherit+0x110>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4013      	ands	r3, r2
 8005822:	4a17      	ldr	r2, [pc, #92]	; (8005880 <xTaskPriorityDisinherit+0x110>)
 8005824:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f1c3 0207 	rsb	r2, r3, #7
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	2201      	movs	r2, #1
 8005840:	409a      	lsls	r2, r3
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <xTaskPriorityDisinherit+0x110>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4313      	orrs	r3, r2
 8005848:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <xTaskPriorityDisinherit+0x110>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4a08      	ldr	r2, [pc, #32]	; (800587c <xTaskPriorityDisinherit+0x10c>)
 800585a:	441a      	add	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7fe fd33 	bl	80042ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
	}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	200003e8 	.word	0x200003e8
 800587c:	200003ec 	.word	0x200003ec
 8005880:	200004f0 	.word	0x200004f0

08005884 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800588e:	4b29      	ldr	r3, [pc, #164]	; (8005934 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005894:	4b28      	ldr	r3, [pc, #160]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd74 	bl	8004388 <uxListRemove>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058a6:	4b24      	ldr	r3, [pc, #144]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	2201      	movs	r2, #1
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43da      	mvns	r2, r3
 80058b4:	4b21      	ldr	r3, [pc, #132]	; (800593c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4013      	ands	r3, r2
 80058ba:	4a20      	ldr	r2, [pc, #128]	; (800593c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d10a      	bne.n	80058dc <prvAddCurrentTaskToDelayedList+0x58>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	481a      	ldr	r0, [pc, #104]	; (8005940 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058d6:	f7fe fcfa 	bl	80042ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058da:	e026      	b.n	800592a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d209      	bcs.n	8005908 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058f4:	4b13      	ldr	r3, [pc, #76]	; (8005944 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3304      	adds	r3, #4
 80058fe:	4619      	mov	r1, r3
 8005900:	4610      	mov	r0, r2
 8005902:	f7fe fd08 	bl	8004316 <vListInsert>
}
 8005906:	e010      	b.n	800592a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005908:	4b0f      	ldr	r3, [pc, #60]	; (8005948 <prvAddCurrentTaskToDelayedList+0xc4>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <prvAddCurrentTaskToDelayedList+0xb4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3304      	adds	r3, #4
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f7fe fcfe 	bl	8004316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <prvAddCurrentTaskToDelayedList+0xc8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	429a      	cmp	r2, r3
 8005922:	d202      	bcs.n	800592a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005924:	4a09      	ldr	r2, [pc, #36]	; (800594c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6013      	str	r3, [r2, #0]
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	200004ec 	.word	0x200004ec
 8005938:	200003e8 	.word	0x200003e8
 800593c:	200004f0 	.word	0x200004f0
 8005940:	200004d4 	.word	0x200004d4
 8005944:	200004a4 	.word	0x200004a4
 8005948:	200004a0 	.word	0x200004a0
 800594c:	20000508 	.word	0x20000508

08005950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3b04      	subs	r3, #4
 8005960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b04      	subs	r3, #4
 800596e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0201 	bic.w	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b04      	subs	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005980:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <pxPortInitialiseStack+0x64>)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3b14      	subs	r3, #20
 800598a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3b04      	subs	r3, #4
 8005996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f06f 0202 	mvn.w	r2, #2
 800599e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3b20      	subs	r3, #32
 80059a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	080059b9 	.word	0x080059b9

080059b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <prvTaskExitError+0x5c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d00c      	beq.n	80059e6 <prvTaskExitError+0x2e>
	__asm volatile
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	b672      	cpsid	i
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	b662      	cpsie	i
 80059e0:	60fb      	str	r3, [r7, #12]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <prvTaskExitError+0x2c>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	b672      	cpsid	i
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	b662      	cpsie	i
 80059fa:	60bb      	str	r3, [r7, #8]
}
 80059fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059fe:	bf00      	nop
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0fc      	beq.n	8005a00 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000014 	.word	0x20000014
	...

08005a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <pxCurrentTCBConst2>)
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2a:	f380 8809 	msr	PSP, r0
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8811 	msr	BASEPRI, r0
 8005a3a:	4770      	bx	lr
 8005a3c:	f3af 8000 	nop.w

08005a40 <pxCurrentTCBConst2>:
 8005a40:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop

08005a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a48:	4808      	ldr	r0, [pc, #32]	; (8005a6c <prvPortStartFirstTask+0x24>)
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	6800      	ldr	r0, [r0, #0]
 8005a4e:	f380 8808 	msr	MSP, r0
 8005a52:	f04f 0000 	mov.w	r0, #0
 8005a56:	f380 8814 	msr	CONTROL, r0
 8005a5a:	b662      	cpsie	i
 8005a5c:	b661      	cpsie	f
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	df00      	svc	0
 8005a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a6a:	bf00      	nop
 8005a6c:	e000ed08 	.word	0xe000ed08

08005a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a76:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <xPortStartScheduler+0xe4>)
 8005a78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <xPortStartScheduler+0xe8>)
 8005a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a9e:	4b2f      	ldr	r3, [pc, #188]	; (8005b5c <xPortStartScheduler+0xec>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa4:	e009      	b.n	8005aba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005aa6:	4b2d      	ldr	r3, [pc, #180]	; (8005b5c <xPortStartScheduler+0xec>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <xPortStartScheduler+0xec>)
 8005aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d0ef      	beq.n	8005aa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ac6:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <xPortStartScheduler+0xec>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00c      	beq.n	8005aec <xPortStartScheduler+0x7c>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	60bb      	str	r3, [r7, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <xPortStartScheduler+0xec>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	4a1a      	ldr	r2, [pc, #104]	; (8005b5c <xPortStartScheduler+0xec>)
 8005af4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af6:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <xPortStartScheduler+0xec>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <xPortStartScheduler+0xec>)
 8005b00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <xPortStartScheduler+0xf0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <xPortStartScheduler+0xf0>)
 8005b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b16:	4b12      	ldr	r3, [pc, #72]	; (8005b60 <xPortStartScheduler+0xf0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a11      	ldr	r2, [pc, #68]	; (8005b60 <xPortStartScheduler+0xf0>)
 8005b1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b22:	f000 f8dd 	bl	8005ce0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <xPortStartScheduler+0xf4>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b2c:	f000 f8fc 	bl	8005d28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b30:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <xPortStartScheduler+0xf8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a0c      	ldr	r2, [pc, #48]	; (8005b68 <xPortStartScheduler+0xf8>)
 8005b36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b3c:	f7ff ff84 	bl	8005a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b40:	f7ff fbb0 	bl	80052a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005b44:	f7ff ff38 	bl	80059b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	e000e400 	.word	0xe000e400
 8005b58:	20000514 	.word	0x20000514
 8005b5c:	20000518 	.word	0x20000518
 8005b60:	e000ed20 	.word	0xe000ed20
 8005b64:	20000014 	.word	0x20000014
 8005b68:	e000ef34 	.word	0xe000ef34

08005b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	b672      	cpsid	i
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	b662      	cpsie	i
 8005b86:	607b      	str	r3, [r7, #4]
}
 8005b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <vPortEnterCritical+0x60>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <vPortEnterCritical+0x60>)
 8005b92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <vPortEnterCritical+0x60>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d111      	bne.n	8005bc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	; (8005bd0 <vPortEnterCritical+0x64>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <vPortEnterCritical+0x54>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	b672      	cpsid	i
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	b662      	cpsie	i
 8005bba:	603b      	str	r3, [r7, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vPortEnterCritical+0x52>
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000014 	.word	0x20000014
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bda:	4b13      	ldr	r3, [pc, #76]	; (8005c28 <vPortExitCritical+0x54>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10c      	bne.n	8005bfc <vPortExitCritical+0x28>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	b672      	cpsid	i
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	b662      	cpsie	i
 8005bf6:	607b      	str	r3, [r7, #4]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <vPortExitCritical+0x54>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4a09      	ldr	r2, [pc, #36]	; (8005c28 <vPortExitCritical+0x54>)
 8005c04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <vPortExitCritical+0x54>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d105      	bne.n	8005c1a <vPortExitCritical+0x46>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000014 	.word	0x20000014
 8005c2c:	00000000 	.word	0x00000000

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f01e 0f10 	tst.w	lr, #16
 8005c40:	bf08      	it	eq
 8005c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	6010      	str	r0, [r2, #0]
 8005c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c54:	b672      	cpsid	i
 8005c56:	f380 8811 	msr	BASEPRI, r0
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	b662      	cpsie	i
 8005c64:	f7ff fb1e 	bl	80052a4 <vTaskSwitchContext>
 8005c68:	f04f 0000 	mov.w	r0, #0
 8005c6c:	f380 8811 	msr	BASEPRI, r0
 8005c70:	bc09      	pop	{r0, r3}
 8005c72:	6819      	ldr	r1, [r3, #0]
 8005c74:	6808      	ldr	r0, [r1, #0]
 8005c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7a:	f01e 0f10 	tst.w	lr, #16
 8005c7e:	bf08      	it	eq
 8005c80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c84:	f380 8809 	msr	PSP, r0
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop

08005c90 <pxCurrentTCBConst>:
 8005c90:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	b672      	cpsid	i
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	b662      	cpsie	i
 8005cb2:	607b      	str	r3, [r7, #4]
}
 8005cb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cb6:	f7ff fa3b 	bl	8005130 <xTaskIncrementTick>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <xPortSysTickHandler+0x44>)
 8005cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f383 8811 	msr	BASEPRI, r3
}
 8005cd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <vPortSetupTimerInterrupt+0x34>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cea:	4b0b      	ldr	r3, [pc, #44]	; (8005d18 <vPortSetupTimerInterrupt+0x38>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <vPortSetupTimerInterrupt+0x3c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <vPortSetupTimerInterrupt+0x40>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	099b      	lsrs	r3, r3, #6
 8005cfc:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <vPortSetupTimerInterrupt+0x44>)
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <vPortSetupTimerInterrupt+0x34>)
 8005d04:	2207      	movs	r2, #7
 8005d06:	601a      	str	r2, [r3, #0]
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	e000e010 	.word	0xe000e010
 8005d18:	e000e018 	.word	0xe000e018
 8005d1c:	20000008 	.word	0x20000008
 8005d20:	10624dd3 	.word	0x10624dd3
 8005d24:	e000e014 	.word	0xe000e014

08005d28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d38 <vPortEnableVFP+0x10>
 8005d2c:	6801      	ldr	r1, [r0, #0]
 8005d2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d32:	6001      	str	r1, [r0, #0]
 8005d34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d36:	bf00      	nop
 8005d38:	e000ed88 	.word	0xe000ed88

08005d3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d48:	f7ff f946 	bl	8004fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d4c:	4b5b      	ldr	r3, [pc, #364]	; (8005ebc <pvPortMalloc+0x180>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d54:	f000 f91a 	bl	8005f8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d58:	4b59      	ldr	r3, [pc, #356]	; (8005ec0 <pvPortMalloc+0x184>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f040 8092 	bne.w	8005e8a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01f      	beq.n	8005dac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4413      	add	r3, r2
 8005d72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d016      	beq.n	8005dac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f023 0307 	bic.w	r3, r3, #7
 8005d84:	3308      	adds	r3, #8
 8005d86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <pvPortMalloc+0x70>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	b672      	cpsid	i
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	b662      	cpsie	i
 8005da6:	617b      	str	r3, [r7, #20]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d06b      	beq.n	8005e8a <pvPortMalloc+0x14e>
 8005db2:	4b44      	ldr	r3, [pc, #272]	; (8005ec4 <pvPortMalloc+0x188>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d866      	bhi.n	8005e8a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dbc:	4b42      	ldr	r3, [pc, #264]	; (8005ec8 <pvPortMalloc+0x18c>)
 8005dbe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dc0:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <pvPortMalloc+0x18c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dc6:	e004      	b.n	8005dd2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d903      	bls.n	8005de4 <pvPortMalloc+0xa8>
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1f1      	bne.n	8005dc8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005de4:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <pvPortMalloc+0x180>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d04d      	beq.n	8005e8a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2208      	movs	r2, #8
 8005df4:	4413      	add	r3, r2
 8005df6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	1ad2      	subs	r2, r2, r3
 8005e08:	2308      	movs	r3, #8
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d921      	bls.n	8005e54 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4413      	add	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <pvPortMalloc+0x100>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e26:	b672      	cpsid	i
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	b662      	cpsie	i
 8005e36:	613b      	str	r3, [r7, #16]
}
 8005e38:	bf00      	nop
 8005e3a:	e7fe      	b.n	8005e3a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	1ad2      	subs	r2, r2, r3
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e4e:	69b8      	ldr	r0, [r7, #24]
 8005e50:	f000 f8fe 	bl	8006050 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e54:	4b1b      	ldr	r3, [pc, #108]	; (8005ec4 <pvPortMalloc+0x188>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4a19      	ldr	r2, [pc, #100]	; (8005ec4 <pvPortMalloc+0x188>)
 8005e60:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e62:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <pvPortMalloc+0x188>)
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <pvPortMalloc+0x190>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d203      	bcs.n	8005e76 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	; (8005ec4 <pvPortMalloc+0x188>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <pvPortMalloc+0x190>)
 8005e74:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <pvPortMalloc+0x184>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e8a:	f7ff f8b3 	bl	8004ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <pvPortMalloc+0x176>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	b672      	cpsid	i
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	b662      	cpsie	i
 8005eac:	60fb      	str	r3, [r7, #12]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <pvPortMalloc+0x174>
	return pvReturn;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3728      	adds	r7, #40	; 0x28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20004124 	.word	0x20004124
 8005ec0:	20004130 	.word	0x20004130
 8005ec4:	20004128 	.word	0x20004128
 8005ec8:	2000411c 	.word	0x2000411c
 8005ecc:	2000412c 	.word	0x2000412c

08005ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d04c      	beq.n	8005f7c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <vPortFree+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10c      	bne.n	8005f18 <vPortFree+0x48>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	b672      	cpsid	i
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	b662      	cpsie	i
 8005f12:	60fb      	str	r3, [r7, #12]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <vPortFree+0x6a>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	b672      	cpsid	i
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	b662      	cpsie	i
 8005f34:	60bb      	str	r3, [r7, #8]
}
 8005f36:	bf00      	nop
 8005f38:	e7fe      	b.n	8005f38 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <vPortFree+0xb4>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d019      	beq.n	8005f7c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d115      	bne.n	8005f7c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <vPortFree+0xb4>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	43db      	mvns	r3, r3
 8005f5a:	401a      	ands	r2, r3
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f60:	f7ff f83a 	bl	8004fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <vPortFree+0xb8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <vPortFree+0xb8>)
 8005f70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f72:	6938      	ldr	r0, [r7, #16]
 8005f74:	f000 f86c 	bl	8006050 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f78:	f7ff f83c 	bl	8004ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7c:	bf00      	nop
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20004130 	.word	0x20004130
 8005f88:	20004128 	.word	0x20004128

08005f8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f98:	4b27      	ldr	r3, [pc, #156]	; (8006038 <prvHeapInit+0xac>)
 8005f9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <prvHeapInit+0xac>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	; (800603c <prvHeapInit+0xb0>)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fca:	4b1c      	ldr	r3, [pc, #112]	; (800603c <prvHeapInit+0xb0>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fd8:	2208      	movs	r2, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0307 	bic.w	r3, r3, #7
 8005fe6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <prvHeapInit+0xb4>)
 8005fec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fee:	4b14      	ldr	r3, [pc, #80]	; (8006040 <prvHeapInit+0xb4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800600c:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <prvHeapInit+0xb4>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	4a0a      	ldr	r2, [pc, #40]	; (8006044 <prvHeapInit+0xb8>)
 800601a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a09      	ldr	r2, [pc, #36]	; (8006048 <prvHeapInit+0xbc>)
 8006022:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <prvHeapInit+0xc0>)
 8006026:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	2000051c 	.word	0x2000051c
 800603c:	2000411c 	.word	0x2000411c
 8006040:	20004124 	.word	0x20004124
 8006044:	2000412c 	.word	0x2000412c
 8006048:	20004128 	.word	0x20004128
 800604c:	20004130 	.word	0x20004130

08006050 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006058:	4b28      	ldr	r3, [pc, #160]	; (80060fc <prvInsertBlockIntoFreeList+0xac>)
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	e002      	b.n	8006064 <prvInsertBlockIntoFreeList+0x14>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	429a      	cmp	r2, r3
 800606c:	d8f7      	bhi.n	800605e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d108      	bne.n	8006092 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d118      	bne.n	80060d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b15      	ldr	r3, [pc, #84]	; (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d00d      	beq.n	80060ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	441a      	add	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060ce:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <prvInsertBlockIntoFreeList+0xb0>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e003      	b.n	80060e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d002      	beq.n	80060ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	2000411c 	.word	0x2000411c
 8006100:	20004124 	.word	0x20004124

08006104 <__errno>:
 8006104:	4b01      	ldr	r3, [pc, #4]	; (800610c <__errno+0x8>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000018 	.word	0x20000018

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f001 f832 	bl	800718c <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	08007340 	.word	0x08007340
 800614c:	08007340 	.word	0x08007340
 8006150:	08007340 	.word	0x08007340
 8006154:	08007344 	.word	0x08007344

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616e:	4291      	cmp	r1, r2
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <iprintf>:
 8006184:	b40f      	push	{r0, r1, r2, r3}
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <iprintf+0x2c>)
 8006188:	b513      	push	{r0, r1, r4, lr}
 800618a:	681c      	ldr	r4, [r3, #0]
 800618c:	b124      	cbz	r4, 8006198 <iprintf+0x14>
 800618e:	69a3      	ldr	r3, [r4, #24]
 8006190:	b913      	cbnz	r3, 8006198 <iprintf+0x14>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fa5e 	bl	8006654 <__sinit>
 8006198:	ab05      	add	r3, sp, #20
 800619a:	9a04      	ldr	r2, [sp, #16]
 800619c:	68a1      	ldr	r1, [r4, #8]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 fc67 	bl	8006a74 <_vfiprintf_r>
 80061a6:	b002      	add	sp, #8
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	b004      	add	sp, #16
 80061ae:	4770      	bx	lr
 80061b0:	20000018 	.word	0x20000018

080061b4 <_puts_r>:
 80061b4:	b570      	push	{r4, r5, r6, lr}
 80061b6:	460e      	mov	r6, r1
 80061b8:	4605      	mov	r5, r0
 80061ba:	b118      	cbz	r0, 80061c4 <_puts_r+0x10>
 80061bc:	6983      	ldr	r3, [r0, #24]
 80061be:	b90b      	cbnz	r3, 80061c4 <_puts_r+0x10>
 80061c0:	f000 fa48 	bl	8006654 <__sinit>
 80061c4:	69ab      	ldr	r3, [r5, #24]
 80061c6:	68ac      	ldr	r4, [r5, #8]
 80061c8:	b913      	cbnz	r3, 80061d0 <_puts_r+0x1c>
 80061ca:	4628      	mov	r0, r5
 80061cc:	f000 fa42 	bl	8006654 <__sinit>
 80061d0:	4b2c      	ldr	r3, [pc, #176]	; (8006284 <_puts_r+0xd0>)
 80061d2:	429c      	cmp	r4, r3
 80061d4:	d120      	bne.n	8006218 <_puts_r+0x64>
 80061d6:	686c      	ldr	r4, [r5, #4]
 80061d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061da:	07db      	lsls	r3, r3, #31
 80061dc:	d405      	bmi.n	80061ea <_puts_r+0x36>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	0598      	lsls	r0, r3, #22
 80061e2:	d402      	bmi.n	80061ea <_puts_r+0x36>
 80061e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061e6:	f000 fad3 	bl	8006790 <__retarget_lock_acquire_recursive>
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	0719      	lsls	r1, r3, #28
 80061ee:	d51d      	bpl.n	800622c <_puts_r+0x78>
 80061f0:	6923      	ldr	r3, [r4, #16]
 80061f2:	b1db      	cbz	r3, 800622c <_puts_r+0x78>
 80061f4:	3e01      	subs	r6, #1
 80061f6:	68a3      	ldr	r3, [r4, #8]
 80061f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061fc:	3b01      	subs	r3, #1
 80061fe:	60a3      	str	r3, [r4, #8]
 8006200:	bb39      	cbnz	r1, 8006252 <_puts_r+0x9e>
 8006202:	2b00      	cmp	r3, #0
 8006204:	da38      	bge.n	8006278 <_puts_r+0xc4>
 8006206:	4622      	mov	r2, r4
 8006208:	210a      	movs	r1, #10
 800620a:	4628      	mov	r0, r5
 800620c:	f000 f848 	bl	80062a0 <__swbuf_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d011      	beq.n	8006238 <_puts_r+0x84>
 8006214:	250a      	movs	r5, #10
 8006216:	e011      	b.n	800623c <_puts_r+0x88>
 8006218:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <_puts_r+0xd4>)
 800621a:	429c      	cmp	r4, r3
 800621c:	d101      	bne.n	8006222 <_puts_r+0x6e>
 800621e:	68ac      	ldr	r4, [r5, #8]
 8006220:	e7da      	b.n	80061d8 <_puts_r+0x24>
 8006222:	4b1a      	ldr	r3, [pc, #104]	; (800628c <_puts_r+0xd8>)
 8006224:	429c      	cmp	r4, r3
 8006226:	bf08      	it	eq
 8006228:	68ec      	ldreq	r4, [r5, #12]
 800622a:	e7d5      	b.n	80061d8 <_puts_r+0x24>
 800622c:	4621      	mov	r1, r4
 800622e:	4628      	mov	r0, r5
 8006230:	f000 f888 	bl	8006344 <__swsetup_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	d0dd      	beq.n	80061f4 <_puts_r+0x40>
 8006238:	f04f 35ff 	mov.w	r5, #4294967295
 800623c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800623e:	07da      	lsls	r2, r3, #31
 8006240:	d405      	bmi.n	800624e <_puts_r+0x9a>
 8006242:	89a3      	ldrh	r3, [r4, #12]
 8006244:	059b      	lsls	r3, r3, #22
 8006246:	d402      	bmi.n	800624e <_puts_r+0x9a>
 8006248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800624a:	f000 faa2 	bl	8006792 <__retarget_lock_release_recursive>
 800624e:	4628      	mov	r0, r5
 8006250:	bd70      	pop	{r4, r5, r6, pc}
 8006252:	2b00      	cmp	r3, #0
 8006254:	da04      	bge.n	8006260 <_puts_r+0xac>
 8006256:	69a2      	ldr	r2, [r4, #24]
 8006258:	429a      	cmp	r2, r3
 800625a:	dc06      	bgt.n	800626a <_puts_r+0xb6>
 800625c:	290a      	cmp	r1, #10
 800625e:	d004      	beq.n	800626a <_puts_r+0xb6>
 8006260:	6823      	ldr	r3, [r4, #0]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	7019      	strb	r1, [r3, #0]
 8006268:	e7c5      	b.n	80061f6 <_puts_r+0x42>
 800626a:	4622      	mov	r2, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f000 f817 	bl	80062a0 <__swbuf_r>
 8006272:	3001      	adds	r0, #1
 8006274:	d1bf      	bne.n	80061f6 <_puts_r+0x42>
 8006276:	e7df      	b.n	8006238 <_puts_r+0x84>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	250a      	movs	r5, #10
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	701d      	strb	r5, [r3, #0]
 8006282:	e7db      	b.n	800623c <_puts_r+0x88>
 8006284:	080072c4 	.word	0x080072c4
 8006288:	080072e4 	.word	0x080072e4
 800628c:	080072a4 	.word	0x080072a4

08006290 <puts>:
 8006290:	4b02      	ldr	r3, [pc, #8]	; (800629c <puts+0xc>)
 8006292:	4601      	mov	r1, r0
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f7ff bf8d 	b.w	80061b4 <_puts_r>
 800629a:	bf00      	nop
 800629c:	20000018 	.word	0x20000018

080062a0 <__swbuf_r>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	460e      	mov	r6, r1
 80062a4:	4614      	mov	r4, r2
 80062a6:	4605      	mov	r5, r0
 80062a8:	b118      	cbz	r0, 80062b2 <__swbuf_r+0x12>
 80062aa:	6983      	ldr	r3, [r0, #24]
 80062ac:	b90b      	cbnz	r3, 80062b2 <__swbuf_r+0x12>
 80062ae:	f000 f9d1 	bl	8006654 <__sinit>
 80062b2:	4b21      	ldr	r3, [pc, #132]	; (8006338 <__swbuf_r+0x98>)
 80062b4:	429c      	cmp	r4, r3
 80062b6:	d12b      	bne.n	8006310 <__swbuf_r+0x70>
 80062b8:	686c      	ldr	r4, [r5, #4]
 80062ba:	69a3      	ldr	r3, [r4, #24]
 80062bc:	60a3      	str	r3, [r4, #8]
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	071a      	lsls	r2, r3, #28
 80062c2:	d52f      	bpl.n	8006324 <__swbuf_r+0x84>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	b36b      	cbz	r3, 8006324 <__swbuf_r+0x84>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	1ac0      	subs	r0, r0, r3
 80062ce:	6963      	ldr	r3, [r4, #20]
 80062d0:	b2f6      	uxtb	r6, r6
 80062d2:	4283      	cmp	r3, r0
 80062d4:	4637      	mov	r7, r6
 80062d6:	dc04      	bgt.n	80062e2 <__swbuf_r+0x42>
 80062d8:	4621      	mov	r1, r4
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f926 	bl	800652c <_fflush_r>
 80062e0:	bb30      	cbnz	r0, 8006330 <__swbuf_r+0x90>
 80062e2:	68a3      	ldr	r3, [r4, #8]
 80062e4:	3b01      	subs	r3, #1
 80062e6:	60a3      	str	r3, [r4, #8]
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	6022      	str	r2, [r4, #0]
 80062ee:	701e      	strb	r6, [r3, #0]
 80062f0:	6963      	ldr	r3, [r4, #20]
 80062f2:	3001      	adds	r0, #1
 80062f4:	4283      	cmp	r3, r0
 80062f6:	d004      	beq.n	8006302 <__swbuf_r+0x62>
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	07db      	lsls	r3, r3, #31
 80062fc:	d506      	bpl.n	800630c <__swbuf_r+0x6c>
 80062fe:	2e0a      	cmp	r6, #10
 8006300:	d104      	bne.n	800630c <__swbuf_r+0x6c>
 8006302:	4621      	mov	r1, r4
 8006304:	4628      	mov	r0, r5
 8006306:	f000 f911 	bl	800652c <_fflush_r>
 800630a:	b988      	cbnz	r0, 8006330 <__swbuf_r+0x90>
 800630c:	4638      	mov	r0, r7
 800630e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <__swbuf_r+0x9c>)
 8006312:	429c      	cmp	r4, r3
 8006314:	d101      	bne.n	800631a <__swbuf_r+0x7a>
 8006316:	68ac      	ldr	r4, [r5, #8]
 8006318:	e7cf      	b.n	80062ba <__swbuf_r+0x1a>
 800631a:	4b09      	ldr	r3, [pc, #36]	; (8006340 <__swbuf_r+0xa0>)
 800631c:	429c      	cmp	r4, r3
 800631e:	bf08      	it	eq
 8006320:	68ec      	ldreq	r4, [r5, #12]
 8006322:	e7ca      	b.n	80062ba <__swbuf_r+0x1a>
 8006324:	4621      	mov	r1, r4
 8006326:	4628      	mov	r0, r5
 8006328:	f000 f80c 	bl	8006344 <__swsetup_r>
 800632c:	2800      	cmp	r0, #0
 800632e:	d0cb      	beq.n	80062c8 <__swbuf_r+0x28>
 8006330:	f04f 37ff 	mov.w	r7, #4294967295
 8006334:	e7ea      	b.n	800630c <__swbuf_r+0x6c>
 8006336:	bf00      	nop
 8006338:	080072c4 	.word	0x080072c4
 800633c:	080072e4 	.word	0x080072e4
 8006340:	080072a4 	.word	0x080072a4

08006344 <__swsetup_r>:
 8006344:	4b32      	ldr	r3, [pc, #200]	; (8006410 <__swsetup_r+0xcc>)
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	681d      	ldr	r5, [r3, #0]
 800634a:	4606      	mov	r6, r0
 800634c:	460c      	mov	r4, r1
 800634e:	b125      	cbz	r5, 800635a <__swsetup_r+0x16>
 8006350:	69ab      	ldr	r3, [r5, #24]
 8006352:	b913      	cbnz	r3, 800635a <__swsetup_r+0x16>
 8006354:	4628      	mov	r0, r5
 8006356:	f000 f97d 	bl	8006654 <__sinit>
 800635a:	4b2e      	ldr	r3, [pc, #184]	; (8006414 <__swsetup_r+0xd0>)
 800635c:	429c      	cmp	r4, r3
 800635e:	d10f      	bne.n	8006380 <__swsetup_r+0x3c>
 8006360:	686c      	ldr	r4, [r5, #4]
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006368:	0719      	lsls	r1, r3, #28
 800636a:	d42c      	bmi.n	80063c6 <__swsetup_r+0x82>
 800636c:	06dd      	lsls	r5, r3, #27
 800636e:	d411      	bmi.n	8006394 <__swsetup_r+0x50>
 8006370:	2309      	movs	r3, #9
 8006372:	6033      	str	r3, [r6, #0]
 8006374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	f04f 30ff 	mov.w	r0, #4294967295
 800637e:	e03e      	b.n	80063fe <__swsetup_r+0xba>
 8006380:	4b25      	ldr	r3, [pc, #148]	; (8006418 <__swsetup_r+0xd4>)
 8006382:	429c      	cmp	r4, r3
 8006384:	d101      	bne.n	800638a <__swsetup_r+0x46>
 8006386:	68ac      	ldr	r4, [r5, #8]
 8006388:	e7eb      	b.n	8006362 <__swsetup_r+0x1e>
 800638a:	4b24      	ldr	r3, [pc, #144]	; (800641c <__swsetup_r+0xd8>)
 800638c:	429c      	cmp	r4, r3
 800638e:	bf08      	it	eq
 8006390:	68ec      	ldreq	r4, [r5, #12]
 8006392:	e7e6      	b.n	8006362 <__swsetup_r+0x1e>
 8006394:	0758      	lsls	r0, r3, #29
 8006396:	d512      	bpl.n	80063be <__swsetup_r+0x7a>
 8006398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800639a:	b141      	cbz	r1, 80063ae <__swsetup_r+0x6a>
 800639c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a0:	4299      	cmp	r1, r3
 80063a2:	d002      	beq.n	80063aa <__swsetup_r+0x66>
 80063a4:	4630      	mov	r0, r6
 80063a6:	f000 fa5b 	bl	8006860 <_free_r>
 80063aa:	2300      	movs	r3, #0
 80063ac:	6363      	str	r3, [r4, #52]	; 0x34
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	2300      	movs	r3, #0
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	6023      	str	r3, [r4, #0]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	f043 0308 	orr.w	r3, r3, #8
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	b94b      	cbnz	r3, 80063de <__swsetup_r+0x9a>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d4:	d003      	beq.n	80063de <__swsetup_r+0x9a>
 80063d6:	4621      	mov	r1, r4
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 fa01 	bl	80067e0 <__smakebuf_r>
 80063de:	89a0      	ldrh	r0, [r4, #12]
 80063e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e4:	f010 0301 	ands.w	r3, r0, #1
 80063e8:	d00a      	beq.n	8006400 <__swsetup_r+0xbc>
 80063ea:	2300      	movs	r3, #0
 80063ec:	60a3      	str	r3, [r4, #8]
 80063ee:	6963      	ldr	r3, [r4, #20]
 80063f0:	425b      	negs	r3, r3
 80063f2:	61a3      	str	r3, [r4, #24]
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	b943      	cbnz	r3, 800640a <__swsetup_r+0xc6>
 80063f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063fc:	d1ba      	bne.n	8006374 <__swsetup_r+0x30>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	0781      	lsls	r1, r0, #30
 8006402:	bf58      	it	pl
 8006404:	6963      	ldrpl	r3, [r4, #20]
 8006406:	60a3      	str	r3, [r4, #8]
 8006408:	e7f4      	b.n	80063f4 <__swsetup_r+0xb0>
 800640a:	2000      	movs	r0, #0
 800640c:	e7f7      	b.n	80063fe <__swsetup_r+0xba>
 800640e:	bf00      	nop
 8006410:	20000018 	.word	0x20000018
 8006414:	080072c4 	.word	0x080072c4
 8006418:	080072e4 	.word	0x080072e4
 800641c:	080072a4 	.word	0x080072a4

08006420 <__sflush_r>:
 8006420:	898a      	ldrh	r2, [r1, #12]
 8006422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006426:	4605      	mov	r5, r0
 8006428:	0710      	lsls	r0, r2, #28
 800642a:	460c      	mov	r4, r1
 800642c:	d458      	bmi.n	80064e0 <__sflush_r+0xc0>
 800642e:	684b      	ldr	r3, [r1, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	dc05      	bgt.n	8006440 <__sflush_r+0x20>
 8006434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	dc02      	bgt.n	8006440 <__sflush_r+0x20>
 800643a:	2000      	movs	r0, #0
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006442:	2e00      	cmp	r6, #0
 8006444:	d0f9      	beq.n	800643a <__sflush_r+0x1a>
 8006446:	2300      	movs	r3, #0
 8006448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800644c:	682f      	ldr	r7, [r5, #0]
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	d032      	beq.n	80064b8 <__sflush_r+0x98>
 8006452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	075a      	lsls	r2, r3, #29
 8006458:	d505      	bpl.n	8006466 <__sflush_r+0x46>
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	1ac0      	subs	r0, r0, r3
 800645e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006460:	b10b      	cbz	r3, 8006466 <__sflush_r+0x46>
 8006462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006464:	1ac0      	subs	r0, r0, r3
 8006466:	2300      	movs	r3, #0
 8006468:	4602      	mov	r2, r0
 800646a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646c:	6a21      	ldr	r1, [r4, #32]
 800646e:	4628      	mov	r0, r5
 8006470:	47b0      	blx	r6
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	d106      	bne.n	8006486 <__sflush_r+0x66>
 8006478:	6829      	ldr	r1, [r5, #0]
 800647a:	291d      	cmp	r1, #29
 800647c:	d82c      	bhi.n	80064d8 <__sflush_r+0xb8>
 800647e:	4a2a      	ldr	r2, [pc, #168]	; (8006528 <__sflush_r+0x108>)
 8006480:	40ca      	lsrs	r2, r1
 8006482:	07d6      	lsls	r6, r2, #31
 8006484:	d528      	bpl.n	80064d8 <__sflush_r+0xb8>
 8006486:	2200      	movs	r2, #0
 8006488:	6062      	str	r2, [r4, #4]
 800648a:	04d9      	lsls	r1, r3, #19
 800648c:	6922      	ldr	r2, [r4, #16]
 800648e:	6022      	str	r2, [r4, #0]
 8006490:	d504      	bpl.n	800649c <__sflush_r+0x7c>
 8006492:	1c42      	adds	r2, r0, #1
 8006494:	d101      	bne.n	800649a <__sflush_r+0x7a>
 8006496:	682b      	ldr	r3, [r5, #0]
 8006498:	b903      	cbnz	r3, 800649c <__sflush_r+0x7c>
 800649a:	6560      	str	r0, [r4, #84]	; 0x54
 800649c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649e:	602f      	str	r7, [r5, #0]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	d0ca      	beq.n	800643a <__sflush_r+0x1a>
 80064a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a8:	4299      	cmp	r1, r3
 80064aa:	d002      	beq.n	80064b2 <__sflush_r+0x92>
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 f9d7 	bl	8006860 <_free_r>
 80064b2:	2000      	movs	r0, #0
 80064b4:	6360      	str	r0, [r4, #52]	; 0x34
 80064b6:	e7c1      	b.n	800643c <__sflush_r+0x1c>
 80064b8:	6a21      	ldr	r1, [r4, #32]
 80064ba:	2301      	movs	r3, #1
 80064bc:	4628      	mov	r0, r5
 80064be:	47b0      	blx	r6
 80064c0:	1c41      	adds	r1, r0, #1
 80064c2:	d1c7      	bne.n	8006454 <__sflush_r+0x34>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0c4      	beq.n	8006454 <__sflush_r+0x34>
 80064ca:	2b1d      	cmp	r3, #29
 80064cc:	d001      	beq.n	80064d2 <__sflush_r+0xb2>
 80064ce:	2b16      	cmp	r3, #22
 80064d0:	d101      	bne.n	80064d6 <__sflush_r+0xb6>
 80064d2:	602f      	str	r7, [r5, #0]
 80064d4:	e7b1      	b.n	800643a <__sflush_r+0x1a>
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	e7ad      	b.n	800643c <__sflush_r+0x1c>
 80064e0:	690f      	ldr	r7, [r1, #16]
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	d0a9      	beq.n	800643a <__sflush_r+0x1a>
 80064e6:	0793      	lsls	r3, r2, #30
 80064e8:	680e      	ldr	r6, [r1, #0]
 80064ea:	bf08      	it	eq
 80064ec:	694b      	ldreq	r3, [r1, #20]
 80064ee:	600f      	str	r7, [r1, #0]
 80064f0:	bf18      	it	ne
 80064f2:	2300      	movne	r3, #0
 80064f4:	eba6 0807 	sub.w	r8, r6, r7
 80064f8:	608b      	str	r3, [r1, #8]
 80064fa:	f1b8 0f00 	cmp.w	r8, #0
 80064fe:	dd9c      	ble.n	800643a <__sflush_r+0x1a>
 8006500:	6a21      	ldr	r1, [r4, #32]
 8006502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006504:	4643      	mov	r3, r8
 8006506:	463a      	mov	r2, r7
 8006508:	4628      	mov	r0, r5
 800650a:	47b0      	blx	r6
 800650c:	2800      	cmp	r0, #0
 800650e:	dc06      	bgt.n	800651e <__sflush_r+0xfe>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006516:	81a3      	strh	r3, [r4, #12]
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	e78e      	b.n	800643c <__sflush_r+0x1c>
 800651e:	4407      	add	r7, r0
 8006520:	eba8 0800 	sub.w	r8, r8, r0
 8006524:	e7e9      	b.n	80064fa <__sflush_r+0xda>
 8006526:	bf00      	nop
 8006528:	20400001 	.word	0x20400001

0800652c <_fflush_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	690b      	ldr	r3, [r1, #16]
 8006530:	4605      	mov	r5, r0
 8006532:	460c      	mov	r4, r1
 8006534:	b913      	cbnz	r3, 800653c <_fflush_r+0x10>
 8006536:	2500      	movs	r5, #0
 8006538:	4628      	mov	r0, r5
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	b118      	cbz	r0, 8006546 <_fflush_r+0x1a>
 800653e:	6983      	ldr	r3, [r0, #24]
 8006540:	b90b      	cbnz	r3, 8006546 <_fflush_r+0x1a>
 8006542:	f000 f887 	bl	8006654 <__sinit>
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <_fflush_r+0x6c>)
 8006548:	429c      	cmp	r4, r3
 800654a:	d11b      	bne.n	8006584 <_fflush_r+0x58>
 800654c:	686c      	ldr	r4, [r5, #4]
 800654e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ef      	beq.n	8006536 <_fflush_r+0xa>
 8006556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006558:	07d0      	lsls	r0, r2, #31
 800655a:	d404      	bmi.n	8006566 <_fflush_r+0x3a>
 800655c:	0599      	lsls	r1, r3, #22
 800655e:	d402      	bmi.n	8006566 <_fflush_r+0x3a>
 8006560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006562:	f000 f915 	bl	8006790 <__retarget_lock_acquire_recursive>
 8006566:	4628      	mov	r0, r5
 8006568:	4621      	mov	r1, r4
 800656a:	f7ff ff59 	bl	8006420 <__sflush_r>
 800656e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006570:	07da      	lsls	r2, r3, #31
 8006572:	4605      	mov	r5, r0
 8006574:	d4e0      	bmi.n	8006538 <_fflush_r+0xc>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	059b      	lsls	r3, r3, #22
 800657a:	d4dd      	bmi.n	8006538 <_fflush_r+0xc>
 800657c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800657e:	f000 f908 	bl	8006792 <__retarget_lock_release_recursive>
 8006582:	e7d9      	b.n	8006538 <_fflush_r+0xc>
 8006584:	4b05      	ldr	r3, [pc, #20]	; (800659c <_fflush_r+0x70>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d101      	bne.n	800658e <_fflush_r+0x62>
 800658a:	68ac      	ldr	r4, [r5, #8]
 800658c:	e7df      	b.n	800654e <_fflush_r+0x22>
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <_fflush_r+0x74>)
 8006590:	429c      	cmp	r4, r3
 8006592:	bf08      	it	eq
 8006594:	68ec      	ldreq	r4, [r5, #12]
 8006596:	e7da      	b.n	800654e <_fflush_r+0x22>
 8006598:	080072c4 	.word	0x080072c4
 800659c:	080072e4 	.word	0x080072e4
 80065a0:	080072a4 	.word	0x080072a4

080065a4 <std>:
 80065a4:	2300      	movs	r3, #0
 80065a6:	b510      	push	{r4, lr}
 80065a8:	4604      	mov	r4, r0
 80065aa:	e9c0 3300 	strd	r3, r3, [r0]
 80065ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065b2:	6083      	str	r3, [r0, #8]
 80065b4:	8181      	strh	r1, [r0, #12]
 80065b6:	6643      	str	r3, [r0, #100]	; 0x64
 80065b8:	81c2      	strh	r2, [r0, #14]
 80065ba:	6183      	str	r3, [r0, #24]
 80065bc:	4619      	mov	r1, r3
 80065be:	2208      	movs	r2, #8
 80065c0:	305c      	adds	r0, #92	; 0x5c
 80065c2:	f7ff fdd7 	bl	8006174 <memset>
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <std+0x38>)
 80065c8:	6263      	str	r3, [r4, #36]	; 0x24
 80065ca:	4b05      	ldr	r3, [pc, #20]	; (80065e0 <std+0x3c>)
 80065cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80065ce:	4b05      	ldr	r3, [pc, #20]	; (80065e4 <std+0x40>)
 80065d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <std+0x44>)
 80065d4:	6224      	str	r4, [r4, #32]
 80065d6:	6323      	str	r3, [r4, #48]	; 0x30
 80065d8:	bd10      	pop	{r4, pc}
 80065da:	bf00      	nop
 80065dc:	0800701d 	.word	0x0800701d
 80065e0:	0800703f 	.word	0x0800703f
 80065e4:	08007077 	.word	0x08007077
 80065e8:	0800709b 	.word	0x0800709b

080065ec <_cleanup_r>:
 80065ec:	4901      	ldr	r1, [pc, #4]	; (80065f4 <_cleanup_r+0x8>)
 80065ee:	f000 b8af 	b.w	8006750 <_fwalk_reent>
 80065f2:	bf00      	nop
 80065f4:	0800652d 	.word	0x0800652d

080065f8 <__sfmoreglue>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	2268      	movs	r2, #104	; 0x68
 80065fc:	1e4d      	subs	r5, r1, #1
 80065fe:	4355      	muls	r5, r2
 8006600:	460e      	mov	r6, r1
 8006602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006606:	f000 f997 	bl	8006938 <_malloc_r>
 800660a:	4604      	mov	r4, r0
 800660c:	b140      	cbz	r0, 8006620 <__sfmoreglue+0x28>
 800660e:	2100      	movs	r1, #0
 8006610:	e9c0 1600 	strd	r1, r6, [r0]
 8006614:	300c      	adds	r0, #12
 8006616:	60a0      	str	r0, [r4, #8]
 8006618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800661c:	f7ff fdaa 	bl	8006174 <memset>
 8006620:	4620      	mov	r0, r4
 8006622:	bd70      	pop	{r4, r5, r6, pc}

08006624 <__sfp_lock_acquire>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__sfp_lock_acquire+0x8>)
 8006626:	f000 b8b3 	b.w	8006790 <__retarget_lock_acquire_recursive>
 800662a:	bf00      	nop
 800662c:	20004135 	.word	0x20004135

08006630 <__sfp_lock_release>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__sfp_lock_release+0x8>)
 8006632:	f000 b8ae 	b.w	8006792 <__retarget_lock_release_recursive>
 8006636:	bf00      	nop
 8006638:	20004135 	.word	0x20004135

0800663c <__sinit_lock_acquire>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__sinit_lock_acquire+0x8>)
 800663e:	f000 b8a7 	b.w	8006790 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20004136 	.word	0x20004136

08006648 <__sinit_lock_release>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__sinit_lock_release+0x8>)
 800664a:	f000 b8a2 	b.w	8006792 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20004136 	.word	0x20004136

08006654 <__sinit>:
 8006654:	b510      	push	{r4, lr}
 8006656:	4604      	mov	r4, r0
 8006658:	f7ff fff0 	bl	800663c <__sinit_lock_acquire>
 800665c:	69a3      	ldr	r3, [r4, #24]
 800665e:	b11b      	cbz	r3, 8006668 <__sinit+0x14>
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006664:	f7ff bff0 	b.w	8006648 <__sinit_lock_release>
 8006668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800666c:	6523      	str	r3, [r4, #80]	; 0x50
 800666e:	4b13      	ldr	r3, [pc, #76]	; (80066bc <__sinit+0x68>)
 8006670:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <__sinit+0x6c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	62a2      	str	r2, [r4, #40]	; 0x28
 8006676:	42a3      	cmp	r3, r4
 8006678:	bf04      	itt	eq
 800667a:	2301      	moveq	r3, #1
 800667c:	61a3      	streq	r3, [r4, #24]
 800667e:	4620      	mov	r0, r4
 8006680:	f000 f820 	bl	80066c4 <__sfp>
 8006684:	6060      	str	r0, [r4, #4]
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f81c 	bl	80066c4 <__sfp>
 800668c:	60a0      	str	r0, [r4, #8]
 800668e:	4620      	mov	r0, r4
 8006690:	f000 f818 	bl	80066c4 <__sfp>
 8006694:	2200      	movs	r2, #0
 8006696:	60e0      	str	r0, [r4, #12]
 8006698:	2104      	movs	r1, #4
 800669a:	6860      	ldr	r0, [r4, #4]
 800669c:	f7ff ff82 	bl	80065a4 <std>
 80066a0:	68a0      	ldr	r0, [r4, #8]
 80066a2:	2201      	movs	r2, #1
 80066a4:	2109      	movs	r1, #9
 80066a6:	f7ff ff7d 	bl	80065a4 <std>
 80066aa:	68e0      	ldr	r0, [r4, #12]
 80066ac:	2202      	movs	r2, #2
 80066ae:	2112      	movs	r1, #18
 80066b0:	f7ff ff78 	bl	80065a4 <std>
 80066b4:	2301      	movs	r3, #1
 80066b6:	61a3      	str	r3, [r4, #24]
 80066b8:	e7d2      	b.n	8006660 <__sinit+0xc>
 80066ba:	bf00      	nop
 80066bc:	080072a0 	.word	0x080072a0
 80066c0:	080065ed 	.word	0x080065ed

080066c4 <__sfp>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	4607      	mov	r7, r0
 80066c8:	f7ff ffac 	bl	8006624 <__sfp_lock_acquire>
 80066cc:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <__sfp+0x84>)
 80066ce:	681e      	ldr	r6, [r3, #0]
 80066d0:	69b3      	ldr	r3, [r6, #24]
 80066d2:	b913      	cbnz	r3, 80066da <__sfp+0x16>
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff ffbd 	bl	8006654 <__sinit>
 80066da:	3648      	adds	r6, #72	; 0x48
 80066dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	d503      	bpl.n	80066ec <__sfp+0x28>
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	b30b      	cbz	r3, 800672c <__sfp+0x68>
 80066e8:	6836      	ldr	r6, [r6, #0]
 80066ea:	e7f7      	b.n	80066dc <__sfp+0x18>
 80066ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066f0:	b9d5      	cbnz	r5, 8006728 <__sfp+0x64>
 80066f2:	4b16      	ldr	r3, [pc, #88]	; (800674c <__sfp+0x88>)
 80066f4:	60e3      	str	r3, [r4, #12]
 80066f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066fa:	6665      	str	r5, [r4, #100]	; 0x64
 80066fc:	f000 f847 	bl	800678e <__retarget_lock_init_recursive>
 8006700:	f7ff ff96 	bl	8006630 <__sfp_lock_release>
 8006704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800670c:	6025      	str	r5, [r4, #0]
 800670e:	61a5      	str	r5, [r4, #24]
 8006710:	2208      	movs	r2, #8
 8006712:	4629      	mov	r1, r5
 8006714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006718:	f7ff fd2c 	bl	8006174 <memset>
 800671c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006724:	4620      	mov	r0, r4
 8006726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006728:	3468      	adds	r4, #104	; 0x68
 800672a:	e7d9      	b.n	80066e0 <__sfp+0x1c>
 800672c:	2104      	movs	r1, #4
 800672e:	4638      	mov	r0, r7
 8006730:	f7ff ff62 	bl	80065f8 <__sfmoreglue>
 8006734:	4604      	mov	r4, r0
 8006736:	6030      	str	r0, [r6, #0]
 8006738:	2800      	cmp	r0, #0
 800673a:	d1d5      	bne.n	80066e8 <__sfp+0x24>
 800673c:	f7ff ff78 	bl	8006630 <__sfp_lock_release>
 8006740:	230c      	movs	r3, #12
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	e7ee      	b.n	8006724 <__sfp+0x60>
 8006746:	bf00      	nop
 8006748:	080072a0 	.word	0x080072a0
 800674c:	ffff0001 	.word	0xffff0001

08006750 <_fwalk_reent>:
 8006750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006754:	4606      	mov	r6, r0
 8006756:	4688      	mov	r8, r1
 8006758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800675c:	2700      	movs	r7, #0
 800675e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006762:	f1b9 0901 	subs.w	r9, r9, #1
 8006766:	d505      	bpl.n	8006774 <_fwalk_reent+0x24>
 8006768:	6824      	ldr	r4, [r4, #0]
 800676a:	2c00      	cmp	r4, #0
 800676c:	d1f7      	bne.n	800675e <_fwalk_reent+0xe>
 800676e:	4638      	mov	r0, r7
 8006770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006774:	89ab      	ldrh	r3, [r5, #12]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d907      	bls.n	800678a <_fwalk_reent+0x3a>
 800677a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800677e:	3301      	adds	r3, #1
 8006780:	d003      	beq.n	800678a <_fwalk_reent+0x3a>
 8006782:	4629      	mov	r1, r5
 8006784:	4630      	mov	r0, r6
 8006786:	47c0      	blx	r8
 8006788:	4307      	orrs	r7, r0
 800678a:	3568      	adds	r5, #104	; 0x68
 800678c:	e7e9      	b.n	8006762 <_fwalk_reent+0x12>

0800678e <__retarget_lock_init_recursive>:
 800678e:	4770      	bx	lr

08006790 <__retarget_lock_acquire_recursive>:
 8006790:	4770      	bx	lr

08006792 <__retarget_lock_release_recursive>:
 8006792:	4770      	bx	lr

08006794 <__swhatbuf_r>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	460e      	mov	r6, r1
 8006798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679c:	2900      	cmp	r1, #0
 800679e:	b096      	sub	sp, #88	; 0x58
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	da08      	bge.n	80067b8 <__swhatbuf_r+0x24>
 80067a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	061a      	lsls	r2, r3, #24
 80067b0:	d410      	bmi.n	80067d4 <__swhatbuf_r+0x40>
 80067b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067b6:	e00e      	b.n	80067d6 <__swhatbuf_r+0x42>
 80067b8:	466a      	mov	r2, sp
 80067ba:	f000 fc95 	bl	80070e8 <_fstat_r>
 80067be:	2800      	cmp	r0, #0
 80067c0:	dbf1      	blt.n	80067a6 <__swhatbuf_r+0x12>
 80067c2:	9a01      	ldr	r2, [sp, #4]
 80067c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067cc:	425a      	negs	r2, r3
 80067ce:	415a      	adcs	r2, r3
 80067d0:	602a      	str	r2, [r5, #0]
 80067d2:	e7ee      	b.n	80067b2 <__swhatbuf_r+0x1e>
 80067d4:	2340      	movs	r3, #64	; 0x40
 80067d6:	2000      	movs	r0, #0
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	b016      	add	sp, #88	; 0x58
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080067e0 <__smakebuf_r>:
 80067e0:	898b      	ldrh	r3, [r1, #12]
 80067e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067e4:	079d      	lsls	r5, r3, #30
 80067e6:	4606      	mov	r6, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	d507      	bpl.n	80067fc <__smakebuf_r+0x1c>
 80067ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	2301      	movs	r3, #1
 80067f6:	6163      	str	r3, [r4, #20]
 80067f8:	b002      	add	sp, #8
 80067fa:	bd70      	pop	{r4, r5, r6, pc}
 80067fc:	ab01      	add	r3, sp, #4
 80067fe:	466a      	mov	r2, sp
 8006800:	f7ff ffc8 	bl	8006794 <__swhatbuf_r>
 8006804:	9900      	ldr	r1, [sp, #0]
 8006806:	4605      	mov	r5, r0
 8006808:	4630      	mov	r0, r6
 800680a:	f000 f895 	bl	8006938 <_malloc_r>
 800680e:	b948      	cbnz	r0, 8006824 <__smakebuf_r+0x44>
 8006810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006814:	059a      	lsls	r2, r3, #22
 8006816:	d4ef      	bmi.n	80067f8 <__smakebuf_r+0x18>
 8006818:	f023 0303 	bic.w	r3, r3, #3
 800681c:	f043 0302 	orr.w	r3, r3, #2
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	e7e3      	b.n	80067ec <__smakebuf_r+0xc>
 8006824:	4b0d      	ldr	r3, [pc, #52]	; (800685c <__smakebuf_r+0x7c>)
 8006826:	62b3      	str	r3, [r6, #40]	; 0x28
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	6020      	str	r0, [r4, #0]
 800682c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	9b00      	ldr	r3, [sp, #0]
 8006834:	6163      	str	r3, [r4, #20]
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	6120      	str	r0, [r4, #16]
 800683a:	b15b      	cbz	r3, 8006854 <__smakebuf_r+0x74>
 800683c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006840:	4630      	mov	r0, r6
 8006842:	f000 fc63 	bl	800710c <_isatty_r>
 8006846:	b128      	cbz	r0, 8006854 <__smakebuf_r+0x74>
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	89a0      	ldrh	r0, [r4, #12]
 8006856:	4305      	orrs	r5, r0
 8006858:	81a5      	strh	r5, [r4, #12]
 800685a:	e7cd      	b.n	80067f8 <__smakebuf_r+0x18>
 800685c:	080065ed 	.word	0x080065ed

08006860 <_free_r>:
 8006860:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006862:	2900      	cmp	r1, #0
 8006864:	d044      	beq.n	80068f0 <_free_r+0x90>
 8006866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800686a:	9001      	str	r0, [sp, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f1a1 0404 	sub.w	r4, r1, #4
 8006872:	bfb8      	it	lt
 8006874:	18e4      	addlt	r4, r4, r3
 8006876:	f000 fc6b 	bl	8007150 <__malloc_lock>
 800687a:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <_free_r+0x94>)
 800687c:	9801      	ldr	r0, [sp, #4]
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	b933      	cbnz	r3, 8006890 <_free_r+0x30>
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6014      	str	r4, [r2, #0]
 8006886:	b003      	add	sp, #12
 8006888:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800688c:	f000 bc66 	b.w	800715c <__malloc_unlock>
 8006890:	42a3      	cmp	r3, r4
 8006892:	d908      	bls.n	80068a6 <_free_r+0x46>
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	1961      	adds	r1, r4, r5
 8006898:	428b      	cmp	r3, r1
 800689a:	bf01      	itttt	eq
 800689c:	6819      	ldreq	r1, [r3, #0]
 800689e:	685b      	ldreq	r3, [r3, #4]
 80068a0:	1949      	addeq	r1, r1, r5
 80068a2:	6021      	streq	r1, [r4, #0]
 80068a4:	e7ed      	b.n	8006882 <_free_r+0x22>
 80068a6:	461a      	mov	r2, r3
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b10b      	cbz	r3, 80068b0 <_free_r+0x50>
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x46>
 80068b0:	6811      	ldr	r1, [r2, #0]
 80068b2:	1855      	adds	r5, r2, r1
 80068b4:	42a5      	cmp	r5, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x70>
 80068b8:	6824      	ldr	r4, [r4, #0]
 80068ba:	4421      	add	r1, r4
 80068bc:	1854      	adds	r4, r2, r1
 80068be:	42a3      	cmp	r3, r4
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	d1e0      	bne.n	8006886 <_free_r+0x26>
 80068c4:	681c      	ldr	r4, [r3, #0]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	6053      	str	r3, [r2, #4]
 80068ca:	4421      	add	r1, r4
 80068cc:	6011      	str	r1, [r2, #0]
 80068ce:	e7da      	b.n	8006886 <_free_r+0x26>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x78>
 80068d2:	230c      	movs	r3, #12
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	e7d6      	b.n	8006886 <_free_r+0x26>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	1961      	adds	r1, r4, r5
 80068dc:	428b      	cmp	r3, r1
 80068de:	bf04      	itt	eq
 80068e0:	6819      	ldreq	r1, [r3, #0]
 80068e2:	685b      	ldreq	r3, [r3, #4]
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1949      	addeq	r1, r1, r5
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	6054      	str	r4, [r2, #4]
 80068ee:	e7ca      	b.n	8006886 <_free_r+0x26>
 80068f0:	b003      	add	sp, #12
 80068f2:	bd30      	pop	{r4, r5, pc}
 80068f4:	20004138 	.word	0x20004138

080068f8 <sbrk_aligned>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4e0e      	ldr	r6, [pc, #56]	; (8006934 <sbrk_aligned+0x3c>)
 80068fc:	460c      	mov	r4, r1
 80068fe:	6831      	ldr	r1, [r6, #0]
 8006900:	4605      	mov	r5, r0
 8006902:	b911      	cbnz	r1, 800690a <sbrk_aligned+0x12>
 8006904:	f000 fb7a 	bl	8006ffc <_sbrk_r>
 8006908:	6030      	str	r0, [r6, #0]
 800690a:	4621      	mov	r1, r4
 800690c:	4628      	mov	r0, r5
 800690e:	f000 fb75 	bl	8006ffc <_sbrk_r>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d00a      	beq.n	800692c <sbrk_aligned+0x34>
 8006916:	1cc4      	adds	r4, r0, #3
 8006918:	f024 0403 	bic.w	r4, r4, #3
 800691c:	42a0      	cmp	r0, r4
 800691e:	d007      	beq.n	8006930 <sbrk_aligned+0x38>
 8006920:	1a21      	subs	r1, r4, r0
 8006922:	4628      	mov	r0, r5
 8006924:	f000 fb6a 	bl	8006ffc <_sbrk_r>
 8006928:	3001      	adds	r0, #1
 800692a:	d101      	bne.n	8006930 <sbrk_aligned+0x38>
 800692c:	f04f 34ff 	mov.w	r4, #4294967295
 8006930:	4620      	mov	r0, r4
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	2000413c 	.word	0x2000413c

08006938 <_malloc_r>:
 8006938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693c:	1ccd      	adds	r5, r1, #3
 800693e:	f025 0503 	bic.w	r5, r5, #3
 8006942:	3508      	adds	r5, #8
 8006944:	2d0c      	cmp	r5, #12
 8006946:	bf38      	it	cc
 8006948:	250c      	movcc	r5, #12
 800694a:	2d00      	cmp	r5, #0
 800694c:	4607      	mov	r7, r0
 800694e:	db01      	blt.n	8006954 <_malloc_r+0x1c>
 8006950:	42a9      	cmp	r1, r5
 8006952:	d905      	bls.n	8006960 <_malloc_r+0x28>
 8006954:	230c      	movs	r3, #12
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	2600      	movs	r6, #0
 800695a:	4630      	mov	r0, r6
 800695c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006960:	4e2e      	ldr	r6, [pc, #184]	; (8006a1c <_malloc_r+0xe4>)
 8006962:	f000 fbf5 	bl	8007150 <__malloc_lock>
 8006966:	6833      	ldr	r3, [r6, #0]
 8006968:	461c      	mov	r4, r3
 800696a:	bb34      	cbnz	r4, 80069ba <_malloc_r+0x82>
 800696c:	4629      	mov	r1, r5
 800696e:	4638      	mov	r0, r7
 8006970:	f7ff ffc2 	bl	80068f8 <sbrk_aligned>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	4604      	mov	r4, r0
 8006978:	d14d      	bne.n	8006a16 <_malloc_r+0xde>
 800697a:	6834      	ldr	r4, [r6, #0]
 800697c:	4626      	mov	r6, r4
 800697e:	2e00      	cmp	r6, #0
 8006980:	d140      	bne.n	8006a04 <_malloc_r+0xcc>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	4631      	mov	r1, r6
 8006986:	4638      	mov	r0, r7
 8006988:	eb04 0803 	add.w	r8, r4, r3
 800698c:	f000 fb36 	bl	8006ffc <_sbrk_r>
 8006990:	4580      	cmp	r8, r0
 8006992:	d13a      	bne.n	8006a0a <_malloc_r+0xd2>
 8006994:	6821      	ldr	r1, [r4, #0]
 8006996:	3503      	adds	r5, #3
 8006998:	1a6d      	subs	r5, r5, r1
 800699a:	f025 0503 	bic.w	r5, r5, #3
 800699e:	3508      	adds	r5, #8
 80069a0:	2d0c      	cmp	r5, #12
 80069a2:	bf38      	it	cc
 80069a4:	250c      	movcc	r5, #12
 80069a6:	4629      	mov	r1, r5
 80069a8:	4638      	mov	r0, r7
 80069aa:	f7ff ffa5 	bl	80068f8 <sbrk_aligned>
 80069ae:	3001      	adds	r0, #1
 80069b0:	d02b      	beq.n	8006a0a <_malloc_r+0xd2>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	442b      	add	r3, r5
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	e00e      	b.n	80069d8 <_malloc_r+0xa0>
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	1b52      	subs	r2, r2, r5
 80069be:	d41e      	bmi.n	80069fe <_malloc_r+0xc6>
 80069c0:	2a0b      	cmp	r2, #11
 80069c2:	d916      	bls.n	80069f2 <_malloc_r+0xba>
 80069c4:	1961      	adds	r1, r4, r5
 80069c6:	42a3      	cmp	r3, r4
 80069c8:	6025      	str	r5, [r4, #0]
 80069ca:	bf18      	it	ne
 80069cc:	6059      	strne	r1, [r3, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	bf08      	it	eq
 80069d2:	6031      	streq	r1, [r6, #0]
 80069d4:	5162      	str	r2, [r4, r5]
 80069d6:	604b      	str	r3, [r1, #4]
 80069d8:	4638      	mov	r0, r7
 80069da:	f104 060b 	add.w	r6, r4, #11
 80069de:	f000 fbbd 	bl	800715c <__malloc_unlock>
 80069e2:	f026 0607 	bic.w	r6, r6, #7
 80069e6:	1d23      	adds	r3, r4, #4
 80069e8:	1af2      	subs	r2, r6, r3
 80069ea:	d0b6      	beq.n	800695a <_malloc_r+0x22>
 80069ec:	1b9b      	subs	r3, r3, r6
 80069ee:	50a3      	str	r3, [r4, r2]
 80069f0:	e7b3      	b.n	800695a <_malloc_r+0x22>
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	bf0c      	ite	eq
 80069f8:	6032      	streq	r2, [r6, #0]
 80069fa:	605a      	strne	r2, [r3, #4]
 80069fc:	e7ec      	b.n	80069d8 <_malloc_r+0xa0>
 80069fe:	4623      	mov	r3, r4
 8006a00:	6864      	ldr	r4, [r4, #4]
 8006a02:	e7b2      	b.n	800696a <_malloc_r+0x32>
 8006a04:	4634      	mov	r4, r6
 8006a06:	6876      	ldr	r6, [r6, #4]
 8006a08:	e7b9      	b.n	800697e <_malloc_r+0x46>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4638      	mov	r0, r7
 8006a10:	f000 fba4 	bl	800715c <__malloc_unlock>
 8006a14:	e7a1      	b.n	800695a <_malloc_r+0x22>
 8006a16:	6025      	str	r5, [r4, #0]
 8006a18:	e7de      	b.n	80069d8 <_malloc_r+0xa0>
 8006a1a:	bf00      	nop
 8006a1c:	20004138 	.word	0x20004138

08006a20 <__sfputc_r>:
 8006a20:	6893      	ldr	r3, [r2, #8]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	b410      	push	{r4}
 8006a28:	6093      	str	r3, [r2, #8]
 8006a2a:	da08      	bge.n	8006a3e <__sfputc_r+0x1e>
 8006a2c:	6994      	ldr	r4, [r2, #24]
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	db01      	blt.n	8006a36 <__sfputc_r+0x16>
 8006a32:	290a      	cmp	r1, #10
 8006a34:	d103      	bne.n	8006a3e <__sfputc_r+0x1e>
 8006a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3a:	f7ff bc31 	b.w	80062a0 <__swbuf_r>
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	1c58      	adds	r0, r3, #1
 8006a42:	6010      	str	r0, [r2, #0]
 8006a44:	7019      	strb	r1, [r3, #0]
 8006a46:	4608      	mov	r0, r1
 8006a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <__sfputs_r>:
 8006a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a50:	4606      	mov	r6, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	4614      	mov	r4, r2
 8006a56:	18d5      	adds	r5, r2, r3
 8006a58:	42ac      	cmp	r4, r5
 8006a5a:	d101      	bne.n	8006a60 <__sfputs_r+0x12>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e007      	b.n	8006a70 <__sfputs_r+0x22>
 8006a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a64:	463a      	mov	r2, r7
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ffda 	bl	8006a20 <__sfputc_r>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d1f3      	bne.n	8006a58 <__sfputs_r+0xa>
 8006a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a74 <_vfiprintf_r>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	460d      	mov	r5, r1
 8006a7a:	b09d      	sub	sp, #116	; 0x74
 8006a7c:	4614      	mov	r4, r2
 8006a7e:	4698      	mov	r8, r3
 8006a80:	4606      	mov	r6, r0
 8006a82:	b118      	cbz	r0, 8006a8c <_vfiprintf_r+0x18>
 8006a84:	6983      	ldr	r3, [r0, #24]
 8006a86:	b90b      	cbnz	r3, 8006a8c <_vfiprintf_r+0x18>
 8006a88:	f7ff fde4 	bl	8006654 <__sinit>
 8006a8c:	4b89      	ldr	r3, [pc, #548]	; (8006cb4 <_vfiprintf_r+0x240>)
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	d11b      	bne.n	8006aca <_vfiprintf_r+0x56>
 8006a92:	6875      	ldr	r5, [r6, #4]
 8006a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	d405      	bmi.n	8006aa6 <_vfiprintf_r+0x32>
 8006a9a:	89ab      	ldrh	r3, [r5, #12]
 8006a9c:	059a      	lsls	r2, r3, #22
 8006a9e:	d402      	bmi.n	8006aa6 <_vfiprintf_r+0x32>
 8006aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aa2:	f7ff fe75 	bl	8006790 <__retarget_lock_acquire_recursive>
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	071b      	lsls	r3, r3, #28
 8006aaa:	d501      	bpl.n	8006ab0 <_vfiprintf_r+0x3c>
 8006aac:	692b      	ldr	r3, [r5, #16]
 8006aae:	b9eb      	cbnz	r3, 8006aec <_vfiprintf_r+0x78>
 8006ab0:	4629      	mov	r1, r5
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7ff fc46 	bl	8006344 <__swsetup_r>
 8006ab8:	b1c0      	cbz	r0, 8006aec <_vfiprintf_r+0x78>
 8006aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006abc:	07dc      	lsls	r4, r3, #31
 8006abe:	d50e      	bpl.n	8006ade <_vfiprintf_r+0x6a>
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	b01d      	add	sp, #116	; 0x74
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	4b7b      	ldr	r3, [pc, #492]	; (8006cb8 <_vfiprintf_r+0x244>)
 8006acc:	429d      	cmp	r5, r3
 8006ace:	d101      	bne.n	8006ad4 <_vfiprintf_r+0x60>
 8006ad0:	68b5      	ldr	r5, [r6, #8]
 8006ad2:	e7df      	b.n	8006a94 <_vfiprintf_r+0x20>
 8006ad4:	4b79      	ldr	r3, [pc, #484]	; (8006cbc <_vfiprintf_r+0x248>)
 8006ad6:	429d      	cmp	r5, r3
 8006ad8:	bf08      	it	eq
 8006ada:	68f5      	ldreq	r5, [r6, #12]
 8006adc:	e7da      	b.n	8006a94 <_vfiprintf_r+0x20>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	0598      	lsls	r0, r3, #22
 8006ae2:	d4ed      	bmi.n	8006ac0 <_vfiprintf_r+0x4c>
 8006ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ae6:	f7ff fe54 	bl	8006792 <__retarget_lock_release_recursive>
 8006aea:	e7e9      	b.n	8006ac0 <_vfiprintf_r+0x4c>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9309      	str	r3, [sp, #36]	; 0x24
 8006af0:	2320      	movs	r3, #32
 8006af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afa:	2330      	movs	r3, #48	; 0x30
 8006afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cc0 <_vfiprintf_r+0x24c>
 8006b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b04:	f04f 0901 	mov.w	r9, #1
 8006b08:	4623      	mov	r3, r4
 8006b0a:	469a      	mov	sl, r3
 8006b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b10:	b10a      	cbz	r2, 8006b16 <_vfiprintf_r+0xa2>
 8006b12:	2a25      	cmp	r2, #37	; 0x25
 8006b14:	d1f9      	bne.n	8006b0a <_vfiprintf_r+0x96>
 8006b16:	ebba 0b04 	subs.w	fp, sl, r4
 8006b1a:	d00b      	beq.n	8006b34 <_vfiprintf_r+0xc0>
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	4622      	mov	r2, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	4630      	mov	r0, r6
 8006b24:	f7ff ff93 	bl	8006a4e <__sfputs_r>
 8006b28:	3001      	adds	r0, #1
 8006b2a:	f000 80aa 	beq.w	8006c82 <_vfiprintf_r+0x20e>
 8006b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b30:	445a      	add	r2, fp
 8006b32:	9209      	str	r2, [sp, #36]	; 0x24
 8006b34:	f89a 3000 	ldrb.w	r3, [sl]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80a2 	beq.w	8006c82 <_vfiprintf_r+0x20e>
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b48:	f10a 0a01 	add.w	sl, sl, #1
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b54:	931a      	str	r3, [sp, #104]	; 0x68
 8006b56:	4654      	mov	r4, sl
 8006b58:	2205      	movs	r2, #5
 8006b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5e:	4858      	ldr	r0, [pc, #352]	; (8006cc0 <_vfiprintf_r+0x24c>)
 8006b60:	f7f9 fb56 	bl	8000210 <memchr>
 8006b64:	9a04      	ldr	r2, [sp, #16]
 8006b66:	b9d8      	cbnz	r0, 8006ba0 <_vfiprintf_r+0x12c>
 8006b68:	06d1      	lsls	r1, r2, #27
 8006b6a:	bf44      	itt	mi
 8006b6c:	2320      	movmi	r3, #32
 8006b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b72:	0713      	lsls	r3, r2, #28
 8006b74:	bf44      	itt	mi
 8006b76:	232b      	movmi	r3, #43	; 0x2b
 8006b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b80:	2b2a      	cmp	r3, #42	; 0x2a
 8006b82:	d015      	beq.n	8006bb0 <_vfiprintf_r+0x13c>
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	4654      	mov	r4, sl
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f04f 0c0a 	mov.w	ip, #10
 8006b8e:	4621      	mov	r1, r4
 8006b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b94:	3b30      	subs	r3, #48	; 0x30
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d94e      	bls.n	8006c38 <_vfiprintf_r+0x1c4>
 8006b9a:	b1b0      	cbz	r0, 8006bca <_vfiprintf_r+0x156>
 8006b9c:	9207      	str	r2, [sp, #28]
 8006b9e:	e014      	b.n	8006bca <_vfiprintf_r+0x156>
 8006ba0:	eba0 0308 	sub.w	r3, r0, r8
 8006ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	46a2      	mov	sl, r4
 8006bae:	e7d2      	b.n	8006b56 <_vfiprintf_r+0xe2>
 8006bb0:	9b03      	ldr	r3, [sp, #12]
 8006bb2:	1d19      	adds	r1, r3, #4
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	9103      	str	r1, [sp, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfbb      	ittet	lt
 8006bbc:	425b      	neglt	r3, r3
 8006bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc2:	9307      	strge	r3, [sp, #28]
 8006bc4:	9307      	strlt	r3, [sp, #28]
 8006bc6:	bfb8      	it	lt
 8006bc8:	9204      	strlt	r2, [sp, #16]
 8006bca:	7823      	ldrb	r3, [r4, #0]
 8006bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bce:	d10c      	bne.n	8006bea <_vfiprintf_r+0x176>
 8006bd0:	7863      	ldrb	r3, [r4, #1]
 8006bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd4:	d135      	bne.n	8006c42 <_vfiprintf_r+0x1ce>
 8006bd6:	9b03      	ldr	r3, [sp, #12]
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	9203      	str	r2, [sp, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bfb8      	it	lt
 8006be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006be6:	3402      	adds	r4, #2
 8006be8:	9305      	str	r3, [sp, #20]
 8006bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cd0 <_vfiprintf_r+0x25c>
 8006bee:	7821      	ldrb	r1, [r4, #0]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	f7f9 fb0c 	bl	8000210 <memchr>
 8006bf8:	b140      	cbz	r0, 8006c0c <_vfiprintf_r+0x198>
 8006bfa:	2340      	movs	r3, #64	; 0x40
 8006bfc:	eba0 000a 	sub.w	r0, r0, sl
 8006c00:	fa03 f000 	lsl.w	r0, r3, r0
 8006c04:	9b04      	ldr	r3, [sp, #16]
 8006c06:	4303      	orrs	r3, r0
 8006c08:	3401      	adds	r4, #1
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c10:	482c      	ldr	r0, [pc, #176]	; (8006cc4 <_vfiprintf_r+0x250>)
 8006c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c16:	2206      	movs	r2, #6
 8006c18:	f7f9 fafa 	bl	8000210 <memchr>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d03f      	beq.n	8006ca0 <_vfiprintf_r+0x22c>
 8006c20:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <_vfiprintf_r+0x254>)
 8006c22:	bb1b      	cbnz	r3, 8006c6c <_vfiprintf_r+0x1f8>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	3307      	adds	r3, #7
 8006c28:	f023 0307 	bic.w	r3, r3, #7
 8006c2c:	3308      	adds	r3, #8
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c32:	443b      	add	r3, r7
 8006c34:	9309      	str	r3, [sp, #36]	; 0x24
 8006c36:	e767      	b.n	8006b08 <_vfiprintf_r+0x94>
 8006c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c3c:	460c      	mov	r4, r1
 8006c3e:	2001      	movs	r0, #1
 8006c40:	e7a5      	b.n	8006b8e <_vfiprintf_r+0x11a>
 8006c42:	2300      	movs	r3, #0
 8006c44:	3401      	adds	r4, #1
 8006c46:	9305      	str	r3, [sp, #20]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f04f 0c0a 	mov.w	ip, #10
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c54:	3a30      	subs	r2, #48	; 0x30
 8006c56:	2a09      	cmp	r2, #9
 8006c58:	d903      	bls.n	8006c62 <_vfiprintf_r+0x1ee>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0c5      	beq.n	8006bea <_vfiprintf_r+0x176>
 8006c5e:	9105      	str	r1, [sp, #20]
 8006c60:	e7c3      	b.n	8006bea <_vfiprintf_r+0x176>
 8006c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c66:	4604      	mov	r4, r0
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e7f0      	b.n	8006c4e <_vfiprintf_r+0x1da>
 8006c6c:	ab03      	add	r3, sp, #12
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	462a      	mov	r2, r5
 8006c72:	4b16      	ldr	r3, [pc, #88]	; (8006ccc <_vfiprintf_r+0x258>)
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	4630      	mov	r0, r6
 8006c78:	f3af 8000 	nop.w
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	1c78      	adds	r0, r7, #1
 8006c80:	d1d6      	bne.n	8006c30 <_vfiprintf_r+0x1bc>
 8006c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c84:	07d9      	lsls	r1, r3, #31
 8006c86:	d405      	bmi.n	8006c94 <_vfiprintf_r+0x220>
 8006c88:	89ab      	ldrh	r3, [r5, #12]
 8006c8a:	059a      	lsls	r2, r3, #22
 8006c8c:	d402      	bmi.n	8006c94 <_vfiprintf_r+0x220>
 8006c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c90:	f7ff fd7f 	bl	8006792 <__retarget_lock_release_recursive>
 8006c94:	89ab      	ldrh	r3, [r5, #12]
 8006c96:	065b      	lsls	r3, r3, #25
 8006c98:	f53f af12 	bmi.w	8006ac0 <_vfiprintf_r+0x4c>
 8006c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c9e:	e711      	b.n	8006ac4 <_vfiprintf_r+0x50>
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	462a      	mov	r2, r5
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <_vfiprintf_r+0x258>)
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	4630      	mov	r0, r6
 8006cac:	f000 f880 	bl	8006db0 <_printf_i>
 8006cb0:	e7e4      	b.n	8006c7c <_vfiprintf_r+0x208>
 8006cb2:	bf00      	nop
 8006cb4:	080072c4 	.word	0x080072c4
 8006cb8:	080072e4 	.word	0x080072e4
 8006cbc:	080072a4 	.word	0x080072a4
 8006cc0:	08007304 	.word	0x08007304
 8006cc4:	0800730e 	.word	0x0800730e
 8006cc8:	00000000 	.word	0x00000000
 8006ccc:	08006a4f 	.word	0x08006a4f
 8006cd0:	0800730a 	.word	0x0800730a

08006cd4 <_printf_common>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4616      	mov	r6, r2
 8006cda:	4699      	mov	r9, r3
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bfb8      	it	lt
 8006ce8:	4613      	movlt	r3, r2
 8006cea:	6033      	str	r3, [r6, #0]
 8006cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b10a      	cbz	r2, 8006cfa <_printf_common+0x26>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	6833      	ldrmi	r3, [r6, #0]
 8006d02:	3302      	addmi	r3, #2
 8006d04:	6033      	strmi	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d106      	bne.n	8006d1c <_printf_common+0x48>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc26      	bgt.n	8006d6a <_printf_common+0x96>
 8006d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d20:	1e13      	subs	r3, r2, #0
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	bf18      	it	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	0692      	lsls	r2, r2, #26
 8006d2a:	d42b      	bmi.n	8006d84 <_printf_common+0xb0>
 8006d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d30:	4649      	mov	r1, r9
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	3001      	adds	r0, #1
 8006d38:	d01e      	beq.n	8006d78 <_printf_common+0xa4>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	68e5      	ldr	r5, [r4, #12]
 8006d3e:	6832      	ldr	r2, [r6, #0]
 8006d40:	f003 0306 	and.w	r3, r3, #6
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	bf08      	it	eq
 8006d48:	1aad      	subeq	r5, r5, r2
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	bf0c      	ite	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	2500      	movne	r5, #0
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bfc4      	itt	gt
 8006d5a:	1a9b      	subgt	r3, r3, r2
 8006d5c:	18ed      	addgt	r5, r5, r3
 8006d5e:	2600      	movs	r6, #0
 8006d60:	341a      	adds	r4, #26
 8006d62:	42b5      	cmp	r5, r6
 8006d64:	d11a      	bne.n	8006d9c <_printf_common+0xc8>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e008      	b.n	8006d7c <_printf_common+0xa8>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4638      	mov	r0, r7
 8006d72:	47c0      	blx	r8
 8006d74:	3001      	adds	r0, #1
 8006d76:	d103      	bne.n	8006d80 <_printf_common+0xac>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d80:	3501      	adds	r5, #1
 8006d82:	e7c6      	b.n	8006d12 <_printf_common+0x3e>
 8006d84:	18e1      	adds	r1, r4, r3
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	2030      	movs	r0, #48	; 0x30
 8006d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8e:	4422      	add	r2, r4
 8006d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d98:	3302      	adds	r3, #2
 8006d9a:	e7c7      	b.n	8006d2c <_printf_common+0x58>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4649      	mov	r1, r9
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	3001      	adds	r0, #1
 8006da8:	d0e6      	beq.n	8006d78 <_printf_common+0xa4>
 8006daa:	3601      	adds	r6, #1
 8006dac:	e7d9      	b.n	8006d62 <_printf_common+0x8e>
	...

08006db0 <_printf_i>:
 8006db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	7e0f      	ldrb	r7, [r1, #24]
 8006db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db8:	2f78      	cmp	r7, #120	; 0x78
 8006dba:	4691      	mov	r9, r2
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc6:	d807      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dc8:	2f62      	cmp	r7, #98	; 0x62
 8006dca:	d80a      	bhi.n	8006de2 <_printf_i+0x32>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80d8 	beq.w	8006f82 <_printf_i+0x1d2>
 8006dd2:	2f58      	cmp	r7, #88	; 0x58
 8006dd4:	f000 80a3 	beq.w	8006f1e <_printf_i+0x16e>
 8006dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006de0:	e03a      	b.n	8006e58 <_printf_i+0xa8>
 8006de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de6:	2b15      	cmp	r3, #21
 8006de8:	d8f6      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dea:	a101      	add	r1, pc, #4	; (adr r1, 8006df0 <_printf_i+0x40>)
 8006dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006dd9 	.word	0x08006dd9
 8006dfc:	08006dd9 	.word	0x08006dd9
 8006e00:	08006dd9 	.word	0x08006dd9
 8006e04:	08006dd9 	.word	0x08006dd9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006dd9 	.word	0x08006dd9
 8006e10:	08006dd9 	.word	0x08006dd9
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006f69 	.word	0x08006f69
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08006f4b 	.word	0x08006f4b
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f8b 	.word	0x08006f8b
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f53 	.word	0x08006f53
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	602a      	str	r2, [r5, #0]
 8006e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0a3      	b.n	8006fa4 <_printf_i+0x1f4>
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	6829      	ldr	r1, [r5, #0]
 8006e60:	0606      	lsls	r6, r0, #24
 8006e62:	f101 0304 	add.w	r3, r1, #4
 8006e66:	d50a      	bpl.n	8006e7e <_printf_i+0xce>
 8006e68:	680e      	ldr	r6, [r1, #0]
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	2e00      	cmp	r6, #0
 8006e6e:	da03      	bge.n	8006e78 <_printf_i+0xc8>
 8006e70:	232d      	movs	r3, #45	; 0x2d
 8006e72:	4276      	negs	r6, r6
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e78:	485e      	ldr	r0, [pc, #376]	; (8006ff4 <_printf_i+0x244>)
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	e019      	b.n	8006eb2 <_printf_i+0x102>
 8006e7e:	680e      	ldr	r6, [r1, #0]
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e86:	bf18      	it	ne
 8006e88:	b236      	sxthne	r6, r6
 8006e8a:	e7ef      	b.n	8006e6c <_printf_i+0xbc>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	1d19      	adds	r1, r3, #4
 8006e92:	6029      	str	r1, [r5, #0]
 8006e94:	0601      	lsls	r1, r0, #24
 8006e96:	d501      	bpl.n	8006e9c <_printf_i+0xec>
 8006e98:	681e      	ldr	r6, [r3, #0]
 8006e9a:	e002      	b.n	8006ea2 <_printf_i+0xf2>
 8006e9c:	0646      	lsls	r6, r0, #25
 8006e9e:	d5fb      	bpl.n	8006e98 <_printf_i+0xe8>
 8006ea0:	881e      	ldrh	r6, [r3, #0]
 8006ea2:	4854      	ldr	r0, [pc, #336]	; (8006ff4 <_printf_i+0x244>)
 8006ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2308      	moveq	r3, #8
 8006eaa:	230a      	movne	r3, #10
 8006eac:	2100      	movs	r1, #0
 8006eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eb2:	6865      	ldr	r5, [r4, #4]
 8006eb4:	60a5      	str	r5, [r4, #8]
 8006eb6:	2d00      	cmp	r5, #0
 8006eb8:	bfa2      	ittt	ge
 8006eba:	6821      	ldrge	r1, [r4, #0]
 8006ebc:	f021 0104 	bicge.w	r1, r1, #4
 8006ec0:	6021      	strge	r1, [r4, #0]
 8006ec2:	b90e      	cbnz	r6, 8006ec8 <_printf_i+0x118>
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	d04d      	beq.n	8006f64 <_printf_i+0x1b4>
 8006ec8:	4615      	mov	r5, r2
 8006eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ece:	fb03 6711 	mls	r7, r3, r1, r6
 8006ed2:	5dc7      	ldrb	r7, [r0, r7]
 8006ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed8:	4637      	mov	r7, r6
 8006eda:	42bb      	cmp	r3, r7
 8006edc:	460e      	mov	r6, r1
 8006ede:	d9f4      	bls.n	8006eca <_printf_i+0x11a>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d10b      	bne.n	8006efc <_printf_i+0x14c>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	07de      	lsls	r6, r3, #31
 8006ee8:	d508      	bpl.n	8006efc <_printf_i+0x14c>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	bfde      	ittt	le
 8006ef2:	2330      	movle	r3, #48	; 0x30
 8006ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006efc:	1b52      	subs	r2, r2, r5
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	f8cd a000 	str.w	sl, [sp]
 8006f04:	464b      	mov	r3, r9
 8006f06:	aa03      	add	r2, sp, #12
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fee2 	bl	8006cd4 <_printf_common>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d14c      	bne.n	8006fae <_printf_i+0x1fe>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b004      	add	sp, #16
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1e:	4835      	ldr	r0, [pc, #212]	; (8006ff4 <_printf_i+0x244>)
 8006f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f24:	6829      	ldr	r1, [r5, #0]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f2c:	6029      	str	r1, [r5, #0]
 8006f2e:	061d      	lsls	r5, r3, #24
 8006f30:	d514      	bpl.n	8006f5c <_printf_i+0x1ac>
 8006f32:	07df      	lsls	r7, r3, #31
 8006f34:	bf44      	itt	mi
 8006f36:	f043 0320 	orrmi.w	r3, r3, #32
 8006f3a:	6023      	strmi	r3, [r4, #0]
 8006f3c:	b91e      	cbnz	r6, 8006f46 <_printf_i+0x196>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f023 0320 	bic.w	r3, r3, #32
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	2310      	movs	r3, #16
 8006f48:	e7b0      	b.n	8006eac <_printf_i+0xfc>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	f043 0320 	orr.w	r3, r3, #32
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	2378      	movs	r3, #120	; 0x78
 8006f54:	4828      	ldr	r0, [pc, #160]	; (8006ff8 <_printf_i+0x248>)
 8006f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f5a:	e7e3      	b.n	8006f24 <_printf_i+0x174>
 8006f5c:	0659      	lsls	r1, r3, #25
 8006f5e:	bf48      	it	mi
 8006f60:	b2b6      	uxthmi	r6, r6
 8006f62:	e7e6      	b.n	8006f32 <_printf_i+0x182>
 8006f64:	4615      	mov	r5, r2
 8006f66:	e7bb      	b.n	8006ee0 <_printf_i+0x130>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	6826      	ldr	r6, [r4, #0]
 8006f6c:	6961      	ldr	r1, [r4, #20]
 8006f6e:	1d18      	adds	r0, r3, #4
 8006f70:	6028      	str	r0, [r5, #0]
 8006f72:	0635      	lsls	r5, r6, #24
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	d501      	bpl.n	8006f7c <_printf_i+0x1cc>
 8006f78:	6019      	str	r1, [r3, #0]
 8006f7a:	e002      	b.n	8006f82 <_printf_i+0x1d2>
 8006f7c:	0670      	lsls	r0, r6, #25
 8006f7e:	d5fb      	bpl.n	8006f78 <_printf_i+0x1c8>
 8006f80:	8019      	strh	r1, [r3, #0]
 8006f82:	2300      	movs	r3, #0
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	4615      	mov	r5, r2
 8006f88:	e7ba      	b.n	8006f00 <_printf_i+0x150>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	1d1a      	adds	r2, r3, #4
 8006f8e:	602a      	str	r2, [r5, #0]
 8006f90:	681d      	ldr	r5, [r3, #0]
 8006f92:	6862      	ldr	r2, [r4, #4]
 8006f94:	2100      	movs	r1, #0
 8006f96:	4628      	mov	r0, r5
 8006f98:	f7f9 f93a 	bl	8000210 <memchr>
 8006f9c:	b108      	cbz	r0, 8006fa2 <_printf_i+0x1f2>
 8006f9e:	1b40      	subs	r0, r0, r5
 8006fa0:	6060      	str	r0, [r4, #4]
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fac:	e7a8      	b.n	8006f00 <_printf_i+0x150>
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0ab      	beq.n	8006f14 <_printf_i+0x164>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	079b      	lsls	r3, r3, #30
 8006fc0:	d413      	bmi.n	8006fea <_printf_i+0x23a>
 8006fc2:	68e0      	ldr	r0, [r4, #12]
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	bfb8      	it	lt
 8006fca:	4618      	movlt	r0, r3
 8006fcc:	e7a4      	b.n	8006f18 <_printf_i+0x168>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	47d0      	blx	sl
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d09b      	beq.n	8006f14 <_printf_i+0x164>
 8006fdc:	3501      	adds	r5, #1
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	9903      	ldr	r1, [sp, #12]
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dcf2      	bgt.n	8006fce <_printf_i+0x21e>
 8006fe8:	e7eb      	b.n	8006fc2 <_printf_i+0x212>
 8006fea:	2500      	movs	r5, #0
 8006fec:	f104 0619 	add.w	r6, r4, #25
 8006ff0:	e7f5      	b.n	8006fde <_printf_i+0x22e>
 8006ff2:	bf00      	nop
 8006ff4:	08007315 	.word	0x08007315
 8006ff8:	08007326 	.word	0x08007326

08006ffc <_sbrk_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d06      	ldr	r5, [pc, #24]	; (8007018 <_sbrk_r+0x1c>)
 8007000:	2300      	movs	r3, #0
 8007002:	4604      	mov	r4, r0
 8007004:	4608      	mov	r0, r1
 8007006:	602b      	str	r3, [r5, #0]
 8007008:	f7fa f990 	bl	800132c <_sbrk>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_sbrk_r+0x1a>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_sbrk_r+0x1a>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	20004140 	.word	0x20004140

0800701c <__sread>:
 800701c:	b510      	push	{r4, lr}
 800701e:	460c      	mov	r4, r1
 8007020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007024:	f000 f8a0 	bl	8007168 <_read_r>
 8007028:	2800      	cmp	r0, #0
 800702a:	bfab      	itete	ge
 800702c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800702e:	89a3      	ldrhlt	r3, [r4, #12]
 8007030:	181b      	addge	r3, r3, r0
 8007032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007036:	bfac      	ite	ge
 8007038:	6563      	strge	r3, [r4, #84]	; 0x54
 800703a:	81a3      	strhlt	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__swrite>:
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	461f      	mov	r7, r3
 8007044:	898b      	ldrh	r3, [r1, #12]
 8007046:	05db      	lsls	r3, r3, #23
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4616      	mov	r6, r2
 800704e:	d505      	bpl.n	800705c <__swrite+0x1e>
 8007050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007054:	2302      	movs	r3, #2
 8007056:	2200      	movs	r2, #0
 8007058:	f000 f868 	bl	800712c <_lseek_r>
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007066:	81a3      	strh	r3, [r4, #12]
 8007068:	4632      	mov	r2, r6
 800706a:	463b      	mov	r3, r7
 800706c:	4628      	mov	r0, r5
 800706e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007072:	f000 b817 	b.w	80070a4 <_write_r>

08007076 <__sseek>:
 8007076:	b510      	push	{r4, lr}
 8007078:	460c      	mov	r4, r1
 800707a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800707e:	f000 f855 	bl	800712c <_lseek_r>
 8007082:	1c43      	adds	r3, r0, #1
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	bf15      	itete	ne
 8007088:	6560      	strne	r0, [r4, #84]	; 0x54
 800708a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800708e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007092:	81a3      	strheq	r3, [r4, #12]
 8007094:	bf18      	it	ne
 8007096:	81a3      	strhne	r3, [r4, #12]
 8007098:	bd10      	pop	{r4, pc}

0800709a <__sclose>:
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 b813 	b.w	80070c8 <_close_r>
	...

080070a4 <_write_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_write_r+0x20>)
 80070a8:	4604      	mov	r4, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7fa f8e9 	bl	800128a <_write>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_write_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_write_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20004140 	.word	0x20004140

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f7fa f8f5 	bl	80012c2 <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20004140 	.word	0x20004140

080070e8 <_fstat_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_fstat_r+0x20>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f7fa f8f0 	bl	80012da <_fstat>
 80070fa:	1c43      	adds	r3, r0, #1
 80070fc:	d102      	bne.n	8007104 <_fstat_r+0x1c>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	b103      	cbz	r3, 8007104 <_fstat_r+0x1c>
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	bd38      	pop	{r3, r4, r5, pc}
 8007106:	bf00      	nop
 8007108:	20004140 	.word	0x20004140

0800710c <_isatty_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d06      	ldr	r5, [pc, #24]	; (8007128 <_isatty_r+0x1c>)
 8007110:	2300      	movs	r3, #0
 8007112:	4604      	mov	r4, r0
 8007114:	4608      	mov	r0, r1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	f7fa f8ef 	bl	80012fa <_isatty>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_isatty_r+0x1a>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_isatty_r+0x1a>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20004140 	.word	0x20004140

0800712c <_lseek_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	; (800714c <_lseek_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7fa f8e8 	bl	8001310 <_lseek>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_lseek_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_lseek_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20004140 	.word	0x20004140

08007150 <__malloc_lock>:
 8007150:	4801      	ldr	r0, [pc, #4]	; (8007158 <__malloc_lock+0x8>)
 8007152:	f7ff bb1d 	b.w	8006790 <__retarget_lock_acquire_recursive>
 8007156:	bf00      	nop
 8007158:	20004134 	.word	0x20004134

0800715c <__malloc_unlock>:
 800715c:	4801      	ldr	r0, [pc, #4]	; (8007164 <__malloc_unlock+0x8>)
 800715e:	f7ff bb18 	b.w	8006792 <__retarget_lock_release_recursive>
 8007162:	bf00      	nop
 8007164:	20004134 	.word	0x20004134

08007168 <_read_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4d07      	ldr	r5, [pc, #28]	; (8007188 <_read_r+0x20>)
 800716c:	4604      	mov	r4, r0
 800716e:	4608      	mov	r0, r1
 8007170:	4611      	mov	r1, r2
 8007172:	2200      	movs	r2, #0
 8007174:	602a      	str	r2, [r5, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	f7fa f86a 	bl	8001250 <_read>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_read_r+0x1e>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_read_r+0x1e>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20004140 	.word	0x20004140

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
